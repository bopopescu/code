

myvol:
virtualize zvols when they are exported, and pass-through when they are imported.

use my-map.c as basis:
change sysfs interface from foo to mgmt : parsing - map/unmap/query
my_target_ctr
    don't call dm_get_device
    do call fd = filp_open(name, flags, 0600);
    where flags = O_LARGEFILE | O_RDWR | O_DIRECT | O_DSYNC;
    bdev = file_inode(fd)->i_bdev;

    and in the bio's swap out the bio->bi_bdev = bdev;

Globals:
    my_dm_targets linked list and spin lock

struct myvol_dev {
    // vpd t10 info
    name;
    state; // mapped/unmapped
};

To Do:
    fix show
    parse store
    add ioctl suport for sg interface
    grab nvme/scsi for howto respond to sg stuff
    implement master switch - map/unmap

Test:
x 1. first just test using bdev from inode as mapper.
  2. next add linked list/spin lock for multiple devices
  3. add mgmt interface and parser, and fix show (show has 4k read buffer)
  4. add ioctl support and test using sg commands
  5. design virtualization function


