12/21/2016 6:00:59 PM     C:\code\tmp

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
summary to do:
[ ] merge mxapp => can_demux POC
[ ] coefficient builder
[ ] unit tests: roll control
[ ] ambient light cal: => y:ambient2.ino
    => user input: gain and integration time
[ ] HdgHoldCRC -- OMG debug this
[ ] SP & PP different tones : HdgHoldTone
[ ] LCD STM board - start w/pure demo code, update tool chain
[ ] debug PFM release build on jenkins - works locally on HdgHold
[ ] requirements - diff trunk w/devbr
[ ] rs485 remote mag
[ ] mcp overdet: full hardware support ...
[ ] button cal code support
[ ] dimmer cal code support
[ ] @home p.o.c. WxPython & DLL Mx_App

[ ] vim report gen: :tabnew !ls

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[ ] Unit tests: creating CVS in HAP dir
    Transient Repro: SP into max turn rate => PP machine gun

    SimModel/HAP/Autopilot_ARCH_ADP_RollTargetGen.mdl
    SimModel/HAP/Autopilot_ARCH_ADP_RollTargetGen_UnitTest.slx

    unit_test.cpp:
        ut.Assign_Timestamp(COLUMN_0);
        ut.Assign_Run_Function(Roll_Target_Gen_Run);
        ut.Assign_Input (Roll_Target_Gen_Set_Phi,                   COLUMN_1);
        ut.Assign_Input (Roll_Target_Gen_Set_Psi,                   COLUMN_2);
        ut.Assign_Input (Roll_Target_Gen_Set_Psi_Dot,               COLUMN_3);
        ut.Assign_Input (Roll_Target_Gen_Set_Run,                   COLUMN_4);
        ut.Assign_Input (Roll_Target_Gen_Set_PCI_LNR_SP,            COLUMN_5);
        ut.Assign_Input (Roll_Target_Gen_Set_Heading_Setpoint_Bias, COLUMN_6);
        ut.Assign_Output(Roll_Target_Gen_Get_Psi_Target,            COLUMN_7);
        ut.Assign_Output(Roll_Target_Gen_Get_Psi_Dot_Target,        COLUMN_8);

    csv format: 
        oline = sprintf('%8.2f', single(simout_y1.Time(n)) );
        oline = sprintf(['%s,',fFMT,',%s'],  (simin_u1.Data(n));
        oline = sprintf(['%s,',bFMT,],       (simin_u2.Data(n));
        oline = sprintf(['%s,',fFMT,',%s'],  (simin_u3.Data(n));
        oline = sprintf(['%s,',bFMT,],       (simin_u4.Data(n));
      % oline = sprintf(['%s,',fFMT,',%s'],  (simin_u5.Data(n));
      % oline = sprintf(['%s,',fFMT,',%s'],  (simin_u6.Data(n));
        oline = sprintf(['%s,',fFMT,',%s'], (simout_y1.Data(n));
      % oline = sprintf(['%s,',bFMT,],      (simout_y2.Data(n));
      % oline = sprintf(['%s,',bFMT,],      (simout_y3.Data(n));
        otext{k} = sprintf('%s%s\n',otext{k},oline);

    input:
        F32 phi;                   // phi (rad)
        
