
Fresh ideas (understanding):

Goal: understand and code all algorithms in C

Algorithms
==========
Brute force:
    [c:p] selection sort
    [c:p] bubble sort
    [c:p] sequential search
    [c:p] string match
    [c:p] anagram
    [c:p] palindrome
Divide and Conquer: 
    [c:p] merge sort
    [c:p] quicksort
Decrease and Conquer:
    [c:p] binary search
    [c:p] insertion sort
    [c: ] dfs
    [c:p] bfs
Transform and Conquer:
    [c:x] heapsort (max) --> python broken
Dynamic Programming:
    [c: ] warshall
    [c: ] floyd
Greedy:
    [c: ] prim
    [c: ] kruskal 
    [ :x] dijkstra
    [ :x] knapsack
    [ :x] set cover
    [ :x] traveling saleslady
    [ :x] LCS
    [ :x] k-nearest
List: 
    [c: ] reverse
    [c: ] merge
    [c: ] zip
    [c: ] cycle detect (?remove)
Tree: 
    [c: ] avl
    [c: ] travs: pre, post, in, bfs, dfs
    [c: ] trie
String: 
    [c: ] boyer
    [c: ] split
Task:
    [c: ] thread
    [c: ] mutex
    [c: ] condition variable
Feedback:
    [c: ] running avg

$ cloc --by-file *.c
https://github.com/AlDanial/cloc v 1.66  T=0.03 s (277.4 files/s, 61481.6 lines/s)
-------------------------------------------------------------------------------
File                             blank        comment           code
-------------------------------------------------------------------------------
[x] tree.c                              22             43            226
[x] graph.c                             27             44            217
[x] seasort.c                           33             30            213
[x] list.c                              24             17            211
[x] heap.c                              22              5            181
[x] hash.c                              17              1            150
[x] trie.c                              11              6            102
[x] rngstk.c                             6              2             63
-------------------------------------------------------------------------------
SUM:                               162            148           1363
-------------------------------------------------------------------------------

