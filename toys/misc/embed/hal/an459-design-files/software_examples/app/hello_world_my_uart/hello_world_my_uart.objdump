
hello_world_my_uart.elf:     file format elf32-littlenios2
hello_world_my_uart.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00003ec0 memsz 0x00003f10 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  00004ee0  2**0
                  CONTENTS
  2 .text         000027f4  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000304  00006814  00006814  00003814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000013c8  00006b18  00006b18  00003b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000050  00007ee0  00007ee0  00004ee0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00007f30  00007f30  00004ee0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004ee0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005b0  00000000  00000000  00004f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009481  00000000  00000000  000054b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000369b  00000000  00000000  0000e939  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000037a4  00000000  00000000  00011fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000aec  00000000  00000000  00015778  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000019dd  00000000  00000000  00016264  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003227  00000000  00000000  00017c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001ae68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  0001ae98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ccd5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001ccd8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001ccdb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001ccdc  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001ccdd  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001cce1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001cce5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000005  00000000  00000000  0001cce9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000005  00000000  00000000  0001ccee  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000005  00000000  00000000  0001ccf3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0001ccf8  2**0
                  CONTENTS, READONLY
 28 .jdi          000037cc  00000000  00000000  0001ccfe  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00043d62  00000000  00000000  000204ca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00006814 l    d  .rodata	00000000 .rodata
00006b18 l    d  .rwdata	00000000 .rwdata
00007ee0 l    d  .bss	00000000 .bss
00007f30 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../../bsp/hal_my_uart//obj/HAL/src/crt0.o
00004114 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006b18 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_log_macro.o
00004308 l       .text	00000000 tx_next_char
00004330 l       .text	00000000 end_tx
00004310 l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004ed0 l     F .text	00000038 alt_dev_reg
00006c98 l     O .rwdata	0000009c vic_0
00006d34 l     O .rwdata	00001060 jtag_uart
00007d94 l     O .rwdata	000000c4 uart1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00005058 l     F .text	00000050 altera_avalon_jtag_uart_timeout
000050a8 l     F .text	00000138 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00005680 l     F .text	00000058 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
00006a20 l     O .rodata	00000020 VEC_SIZE_ARRAY.1749
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 my_uart_fd.c
00000000 l    df *ABS*	00000000 my_uart_init.c
00005974 l     F .text	00000124 my_uart_irq
00000000 l    df *ABS*	00000000 my_uart_read.c
00000000 l    df *ABS*	00000000 my_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005e90 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005f18 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00006620 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00004b6c g     F .text	00000130 alt_main
0000414c g     F .text	00000080 _puts_r
00004a18 g     F .text	00000038 alt_log_jtag_uart_isr_proc
00007ebc g     O .rwdata	00000001 alt_log_write_on_flag
00000000  w      *UND*	00000000 __errno
00007eb9 g     O .rwdata	00000001 alt_log_jtag_uart_isr_on_flag
00004000 g     F .entry	0000001c __reset
00005bf4 g     F .text	00000128 my_uart_write
00007ee0 g     O .bss	00000004 errno
00007f04 g     O .bss	00000011 alt_log_write_buf
0000594c g     F .text	00000028 my_uart_write_fd
00007ef0 g     O .bss	00000004 alt_argv
0000feb0 g       *ABS*	00000000 _gp
00005ad4 g     F .text	00000120 my_uart_read
00007e58 g     O .rwdata	00000030 alt_fd_list
00006c5c g     O .rwdata	0000001d alt_log_msg_alt_main
00005730 g       .text	00000000 VIC_0_VECTOR_TABLE
00007eba g     O .rwdata	00000001 alt_log_jtag_uart_alarm_on_flag
000061e0 g     F .text	0000007c alt_find_dev
00006410 g     F .text	00000028 memcpy
00005f7c g     F .text	00000098 alt_io_redirect
000041cc g     F .text	00000014 puts
00005390 g     F .text	00000160 altera_avalon_jtag_uart_read
0000673c g     F .text	00000008 .hidden __udivsi3
00004b10 g     F .text	0000005c alt_log_system_clock
00004904 g     F .text	00000030 alt_log_printf_proc
00007eb8 g     O .rwdata	00000001 alt_log_jtag_uart_startup_info_on_flag
00007ec8 g     O .rwdata	00000004 alt_max_fd
00007f18 g     O .bss	00000018 alt_log_jtag_uart_alarm_1
00007eb0 g     O .rwdata	00000004 _global_impure_ptr
00007f30 g       *ABS*	00000000 __bss_end
00004ce4 g     F .text	000000cc alt_tick
00007ee4 g     O .bss	00000004 alt_system_clock_in_sec
000049f8 g     F .text	00000020 alt_log_jtag_uart_startup_info
00004c9c g     F .text	00000048 alt_alarm_stop
00007ebb g     O .rwdata	00000001 alt_log_sys_clk_on_flag
000043b0 g     F .text	00000554 alt_log_private_printf
00007e88 g     O .rwdata	00000028 alt_dev_null
00006c7c g     O .rwdata	00000019 alt_log_msg_bss
00005924 g     F .text	00000028 my_uart_read_fd
000057b0 g       .text	00000000 alt_shadow_non_preemptive_interrupt
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory
00007ecc g     O .rwdata	00000008 alt_dev_list
00004db0 g     F .text	00000120 write
00006744 g     F .text	00000008 .hidden __umodsi3
00007f30 g       *ABS*	00000000 end
00004334 g     F .text	00000018 alt_log_txchar
000051e0 g     F .text	000000ec altera_avalon_jtag_uart_init
00008000 g       *ABS*	00000000 __alt_stack_pointer
000056d8 g     F .text	00000058 alt_avalon_timer_sc_init
000054f0 g     F .text	00000190 altera_avalon_jtag_uart_write
00006484 g     F .text	0000019c __call_exitprocs
00004020 g     F .text	000000f8 _start
00007efc g     O .bss	00000004 _alt_tick_rate
00007ef8 g     O .bss	00000004 _alt_nticks
00004f48 g     F .text	00000078 alt_sys_init
00004300 g       .text	00000000 tx_log_str
000052cc g     F .text	0000003c altera_avalon_jtag_uart_close
00006438 g     F .text	0000004c strncpy
00006bf8 g     O .rwdata	00000004 alt_log_boot_on_flag
00004fc0 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00006328 g     F .text	00000098 alt_get_fd
00005a98 g     F .text	0000003c my_uart_init
00004934 g     F .text	00000070 alt_log_jtag_uart_print_control_reg
000063e0 g     F .text	00000030 memcmp
00005010 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00007f30 g       *ABS*	00000000 __alt_stack_base
00005038 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
0000625c g     F .text	000000cc alt_find_file
00005e98 g     F .text	00000080 alt_dev_llist_insert
000041fc g     F .text	000000ac __sfvwrite_small_dev
00007ee0 g       *ABS*	00000000 __bss_start
00004118 g     F .text	00000034 main
00007eec g     O .bss	00000004 alt_envp
00004fe8 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00007edc g     O .rwdata	00000004 alt_errno
000049a4 g     F .text	00000054 altera_avalon_jtag_uart_report_log
0000668c g     F .text	00000054 .hidden __divsi3
00006bfc g     O .rwdata	0000002a alt_log_msg_cache
00007f00 g     O .bss	00000004 alt_vic_dev_list
00004f08 g     F .text	00000040 alt_irq_init
000061bc g     F .text	00000024 alt_release_fd
00006c28 g     O .rwdata	00000031 alt_log_msg_stackpointer
000042a8 g     F .text	00000058 _write_r
00007eb4 g     O .rwdata	00000004 _impure_ptr
00007ef4 g     O .bss	00000004 alt_argc
000057c8 g     F .text	000000c4 alt_vic_irq_init
00007ed4 g     O .rwdata	00000008 alt_fs_list
00007ee8 g     O .bss	00000004 alt_log_sys_clk_count
00004a50 g     F .text	000000c0 alt_log_write
0000588c g     F .text	00000098 alt_ic_isr_register
00007ee0 g       *ABS*	00000000 _edata
00007f30 g       *ABS*	00000000 _end
00005308 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
000063c0 g     F .text	00000020 exit
000066e0 g     F .text	0000005c .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000674c g     F .text	000000c8 _exit
00005d1c g     F .text	000000a8 alt_alarm_start
000041e0 g     F .text	0000001c strlen
00006014 g     F .text	000001a8 open
00007ec0 g     O .rwdata	00000008 alt_alarm_list
00005dc4 g     F .text	000000cc close
0000434c g     F .text	00000064 alt_log_repchar
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    4000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    4004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    4008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    400c:	00bffd16 	blt	zero,r2,4004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4014:	08500814 	ori	at,at,16416
    jmp r1
    4018:	0800683a 	jmp	at
    401c:	00000000 	call	0 <__alt_mem_onchip_memory-0x4000>

Disassembly of section .text:

00004020 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
    4020:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
    4024:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
    4028:	10000426 	beq	r2,zero,403c <_start+0x1c>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
    402c:	07800014 	movui	sstatus,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
    4030:	07400034 	movhi	ea,0
    ori ea, ea, %lo(0f)
    4034:	ef500f14 	ori	ea,ea,16444
    eret
    4038:	ef80083a 	eret

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    403c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    4040:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    4044:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    4048:	00bffd16 	blt	zero,r2,4040 <_start+0x20>
    .int 2, 1, 0b, 1b
    .popsection
#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)
    404c:	01000034 	movhi	r4,0
    4050:	211afe04 	addi	r4,r4,27640
    4054:	21400037 	ldwio	r5,0(r4)
    4058:	01400326 	beq	zero,r5,4068 <_start+0x48>
    405c:	01000034 	movhi	r4,0
    4060:	211aff04 	addi	r4,r4,27644
    4064:	00043000 	call	4300 <tx_log_str>

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
    4068:	01000034 	movhi	r4,0
    406c:	211afe04 	addi	r4,r4,27640
    4070:	21400037 	ldwio	r5,0(r4)
    4074:	01400326 	beq	zero,r5,4084 <_start+0x64>
    4078:	01000034 	movhi	r4,0
    407c:	211b0a04 	addi	r4,r4,27688
    4080:	00043000 	call	4300 <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4084:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4088:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    408c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    4090:	d6bfac14 	ori	gp,gp,65200
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
    4094:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
    4098:	00c001d4 	movui	r3,7
    movhi r4, 1     /* Constant to increment STATUS.PRS */
    409c:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
    40a0:	1105883a 	add	r2,r2,r4
    wrctl status, r2
    40a4:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
    40a8:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
    40ac:	d034a03a 	wrprs	gp,gp
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
    40b0:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
    40b4:	183ffa1e 	bne	r3,zero,40a0 <_start+0x80>
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)
    40b8:	01000034 	movhi	r4,0
    40bc:	211afe04 	addi	r4,r4,27640
    40c0:	21400037 	ldwio	r5,0(r4)
    40c4:	01400326 	beq	zero,r5,40d4 <_start+0xb4>
    40c8:	01000034 	movhi	r4,0
    40cc:	211b1f04 	addi	r4,r4,27772
    40d0:	00043000 	call	4300 <tx_log_str>

    movhi r2, %hi(__bss_start)
    40d4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    40d8:	109fb814 	ori	r2,r2,32480

    movhi r3, %hi(__bss_end)
    40dc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    40e0:	18dfcc14 	ori	r3,r3,32560

    beq r2, r3, 1f
    40e4:	10c00326 	beq	r2,r3,40f4 <_start+0xd4>

0:
    stw zero, (r2)
    40e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    40ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    40f0:	10fffd36 	bltu	r2,r3,40e8 <_start+0xc8>

    ldw   et, %gprel(alt_stack_limit_value)(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)
    40f4:	01000034 	movhi	r4,0
    40f8:	211afe04 	addi	r4,r4,27640
    40fc:	21400037 	ldwio	r5,0(r4)
    4100:	01400326 	beq	zero,r5,4110 <_start+0xf0>
    4104:	01000034 	movhi	r4,0
    4108:	211b1704 	addi	r4,r4,27740
    410c:	00043000 	call	4300 <tx_log_str>

    /* Call the C entry point. It should never return. */
    call alt_main
    4110:	0004b6c0 	call	4b6c <alt_main>

00004114 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4114:	003fff06 	br	4114 <alt_after_alt_main>

00004118 <main>:
 */

#include <stdio.h>

int main()
{
    4118:	defffe04 	addi	sp,sp,-8
    411c:	dfc00115 	stw	ra,4(sp)
    4120:	df000015 	stw	fp,0(sp)
    4124:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    4128:	01000034 	movhi	r4,0
    412c:	211a0504 	addi	r4,r4,26644
    4130:	00041cc0 	call	41cc <puts>

  return 0;
    4134:	0005883a 	mov	r2,zero
}
    4138:	e037883a 	mov	sp,fp
    413c:	dfc00117 	ldw	ra,4(sp)
    4140:	df000017 	ldw	fp,0(sp)
    4144:	dec00204 	addi	sp,sp,8
    4148:	f800283a 	ret

0000414c <_puts_r>:
    414c:	defffd04 	addi	sp,sp,-12
    4150:	dc000015 	stw	r16,0(sp)
    4154:	2021883a 	mov	r16,r4
    4158:	2809883a 	mov	r4,r5
    415c:	dfc00215 	stw	ra,8(sp)
    4160:	dc400115 	stw	r17,4(sp)
    4164:	2823883a 	mov	r17,r5
    4168:	00041e00 	call	41e0 <strlen>
    416c:	81400217 	ldw	r5,8(r16)
    4170:	00c00034 	movhi	r3,0
    4174:	18d07f04 	addi	r3,r3,16892
    4178:	28c00115 	stw	r3,4(r5)
    417c:	8009883a 	mov	r4,r16
    4180:	880d883a 	mov	r6,r17
    4184:	100f883a 	mov	r7,r2
    4188:	00041fc0 	call	41fc <__sfvwrite_small_dev>
    418c:	00ffffc4 	movi	r3,-1
    4190:	10c00926 	beq	r2,r3,41b8 <_puts_r+0x6c>
    4194:	81400217 	ldw	r5,8(r16)
    4198:	01800034 	movhi	r6,0
    419c:	8009883a 	mov	r4,r16
    41a0:	28800117 	ldw	r2,4(r5)
    41a4:	319ab204 	addi	r6,r6,27336
    41a8:	01c00044 	movi	r7,1
    41ac:	103ee83a 	callr	r2
    41b0:	10bfffe0 	cmpeqi	r2,r2,-1
    41b4:	0085c83a 	sub	r2,zero,r2
    41b8:	dfc00217 	ldw	ra,8(sp)
    41bc:	dc400117 	ldw	r17,4(sp)
    41c0:	dc000017 	ldw	r16,0(sp)
    41c4:	dec00304 	addi	sp,sp,12
    41c8:	f800283a 	ret

000041cc <puts>:
    41cc:	00800034 	movhi	r2,0
    41d0:	109fad04 	addi	r2,r2,32436
    41d4:	200b883a 	mov	r5,r4
    41d8:	11000017 	ldw	r4,0(r2)
    41dc:	000414c1 	jmpi	414c <_puts_r>

000041e0 <strlen>:
    41e0:	2005883a 	mov	r2,r4
    41e4:	10c00007 	ldb	r3,0(r2)
    41e8:	18000226 	beq	r3,zero,41f4 <strlen+0x14>
    41ec:	10800044 	addi	r2,r2,1
    41f0:	003ffc06 	br	41e4 <strlen+0x4>
    41f4:	1105c83a 	sub	r2,r2,r4
    41f8:	f800283a 	ret

000041fc <__sfvwrite_small_dev>:
    41fc:	2880000b 	ldhu	r2,0(r5)
    4200:	defffa04 	addi	sp,sp,-24
    4204:	dc000015 	stw	r16,0(sp)
    4208:	dfc00515 	stw	ra,20(sp)
    420c:	dd000415 	stw	r20,16(sp)
    4210:	dcc00315 	stw	r19,12(sp)
    4214:	dc800215 	stw	r18,8(sp)
    4218:	dc400115 	stw	r17,4(sp)
    421c:	1080020c 	andi	r2,r2,8
    4220:	2821883a 	mov	r16,r5
    4224:	10001726 	beq	r2,zero,4284 <__sfvwrite_small_dev+0x88>
    4228:	2880008f 	ldh	r2,2(r5)
    422c:	10001216 	blt	r2,zero,4278 <__sfvwrite_small_dev+0x7c>
    4230:	2027883a 	mov	r19,r4
    4234:	3025883a 	mov	r18,r6
    4238:	3823883a 	mov	r17,r7
    423c:	05010004 	movi	r20,1024
    4240:	04400b0e 	bge	zero,r17,4270 <__sfvwrite_small_dev+0x74>
    4244:	8140008f 	ldh	r5,2(r16)
    4248:	880f883a 	mov	r7,r17
    424c:	a440010e 	bge	r20,r17,4254 <__sfvwrite_small_dev+0x58>
    4250:	01c10004 	movi	r7,1024
    4254:	9809883a 	mov	r4,r19
    4258:	900d883a 	mov	r6,r18
    425c:	00042a80 	call	42a8 <_write_r>
    4260:	0080050e 	bge	zero,r2,4278 <__sfvwrite_small_dev+0x7c>
    4264:	88a3c83a 	sub	r17,r17,r2
    4268:	90a5883a 	add	r18,r18,r2
    426c:	003ff406 	br	4240 <__sfvwrite_small_dev+0x44>
    4270:	0005883a 	mov	r2,zero
    4274:	00000406 	br	4288 <__sfvwrite_small_dev+0x8c>
    4278:	8080000b 	ldhu	r2,0(r16)
    427c:	10801014 	ori	r2,r2,64
    4280:	8080000d 	sth	r2,0(r16)
    4284:	00bfffc4 	movi	r2,-1
    4288:	dfc00517 	ldw	ra,20(sp)
    428c:	dd000417 	ldw	r20,16(sp)
    4290:	dcc00317 	ldw	r19,12(sp)
    4294:	dc800217 	ldw	r18,8(sp)
    4298:	dc400117 	ldw	r17,4(sp)
    429c:	dc000017 	ldw	r16,0(sp)
    42a0:	dec00604 	addi	sp,sp,24
    42a4:	f800283a 	ret

000042a8 <_write_r>:
    42a8:	defffd04 	addi	sp,sp,-12
    42ac:	dc000015 	stw	r16,0(sp)
    42b0:	04000034 	movhi	r16,0
    42b4:	dc400115 	stw	r17,4(sp)
    42b8:	841fb804 	addi	r16,r16,32480
    42bc:	2023883a 	mov	r17,r4
    42c0:	2809883a 	mov	r4,r5
    42c4:	300b883a 	mov	r5,r6
    42c8:	380d883a 	mov	r6,r7
    42cc:	dfc00215 	stw	ra,8(sp)
    42d0:	80000015 	stw	zero,0(r16)
    42d4:	0004db00 	call	4db0 <write>
    42d8:	00ffffc4 	movi	r3,-1
    42dc:	10c0031e 	bne	r2,r3,42ec <_write_r+0x44>
    42e0:	80c00017 	ldw	r3,0(r16)
    42e4:	18000126 	beq	r3,zero,42ec <_write_r+0x44>
    42e8:	88c00015 	stw	r3,0(r17)
    42ec:	dfc00217 	ldw	ra,8(sp)
    42f0:	dc400117 	ldw	r17,4(sp)
    42f4:	dc000017 	ldw	r16,0(sp)
    42f8:	dec00304 	addi	sp,sp,12
    42fc:	f800283a 	ret

00004300 <tx_log_str>:
	#include "sys/alt_log_printf.h"

        .global tx_log_str
tx_log_str:
	/* load base uart / jtag uart address into r6 */
	movhi r6, %hiadj(ALT_LOG_PORT_BASE)
    4300:	01800034 	movhi	r6,0
	addi r6, r6, %lo(ALT_LOG_PORT_BASE)
    4304:	31800804 	addi	r6,r6,32

00004308 <tx_next_char>:
tx_next_char:
        /* if pointer points to null, return 
         * r4 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	ldb r7, (r4)
    4308:	21c00007 	ldb	r7,0(r4)
	beq r0, r7, end_tx
    430c:	01c00826 	beq	zero,r7,4330 <end_tx>

00004310 <wait_tx_ready_loop>:

	/* check device transmit ready  */
wait_tx_ready_loop:
        ldwio   r8, ALT_LOG_PRINT_REG_OFFSET(r6)
    4310:	32000137 	ldwio	r8,4(r6)
        /*UART, ALT_LOG_PRINT_MSK == 0x40
          JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000 */
        andhi   r5, r8, %hi(ALT_LOG_PRINT_MSK)
    4314:	417fffec 	andhi	r5,r8,65535
        andi    r8, r8, %lo(ALT_LOG_PRINT_MSK)
    4318:	4200000c 	andi	r8,r8,0
        or      r5, r5, r8
    431c:	2a0ab03a 	or	r5,r5,r8
        beq     r5, r0, wait_tx_ready_loop	
    4320:	283ffb26 	beq	r5,zero,4310 <wait_tx_ready_loop>
	/* write char */
	stwio   r7, ALT_LOG_PRINT_TXDATA_REG_OFFSET (r6)		
    4324:	31c00035 	stwio	r7,0(r6)
	/* advance string pointer */
	addi r4, r4, 1
    4328:	21000044 	addi	r4,r4,1
	br tx_next_char
    432c:	003ff606 	br	4308 <tx_next_char>

00004330 <end_tx>:
end_tx:	
        ret
    4330:	f800283a 	ret

00004334 <alt_log_txchar>:

/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
    4334:	28c00104 	addi	r3,r5,4
    4338:	18800037 	ldwio	r2,0(r3)
    433c:	10bfffec 	andhi	r2,r2,65535
    4340:	103ffd26 	beq	r2,zero,4338 <alt_log_txchar+0x4>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
    4344:	29000035 	stwio	r4,0(r5)
    4348:	f800283a 	ret

0000434c <alt_log_repchar>:
}


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
    434c:	defffb04 	addi	sp,sp,-20
    4350:	dfc00415 	stw	ra,16(sp)
    4354:	dcc00315 	stw	r19,12(sp)
    4358:	dc800215 	stw	r18,8(sp)
    435c:	dc400115 	stw	r17,4(sp)
    4360:	dc000015 	stw	r16,0(sp)
  while(r-- > 0)
    4364:	2c3fffc4 	addi	r16,r5,-1
    4368:	01400a0e 	bge	zero,r5,4394 <alt_log_repchar+0x48>
    436c:	3025883a 	mov	r18,r6
    alt_log_txchar(c,(char*) base);
    4370:	24403fcc 	andi	r17,r4,255
    4374:	8c40201c 	xori	r17,r17,128
    4378:	8c7fe004 	addi	r17,r17,-128


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
  while(r-- > 0)
    437c:	04ffffc4 	movi	r19,-1
    alt_log_txchar(c,(char*) base);
    4380:	8809883a 	mov	r4,r17
    4384:	900b883a 	mov	r5,r18
    4388:	00043340 	call	4334 <alt_log_txchar>


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
  while(r-- > 0)
    438c:	843fffc4 	addi	r16,r16,-1
    4390:	84fffb1e 	bne	r16,r19,4380 <alt_log_repchar+0x34>
    alt_log_txchar(c,(char*) base);
}
    4394:	dfc00417 	ldw	ra,16(sp)
    4398:	dcc00317 	ldw	r19,12(sp)
    439c:	dc800217 	ldw	r18,8(sp)
    43a0:	dc400117 	ldw	r17,4(sp)
    43a4:	dc000017 	ldw	r16,0(sp)
    43a8:	dec00504 	addi	sp,sp,20
    43ac:	f800283a 	ret

000043b0 <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
    43b0:	deffee04 	addi	sp,sp,-72
    43b4:	dfc01115 	stw	ra,68(sp)
    43b8:	df001015 	stw	fp,64(sp)
    43bc:	ddc00f15 	stw	r23,60(sp)
    43c0:	dd800e15 	stw	r22,56(sp)
    43c4:	dd400d15 	stw	r21,52(sp)
    43c8:	dd000c15 	stw	r20,48(sp)
    43cc:	dcc00b15 	stw	r19,44(sp)
    43d0:	dc800a15 	stw	r18,40(sp)
    43d4:	dc400915 	stw	r17,36(sp)
    43d8:	dc000815 	stw	r16,32(sp)
    43dc:	d9400015 	stw	r5,0(sp)
    43e0:	d9800515 	stw	r6,20(sp)
    43e4:	2023883a 	mov	r17,r4
  int fmtLong = 0;
  int fmtBeforeDecimal = 0;
  int fmtAfterDecimal = 0;
  int fmtBase = 0;
  int fmtSigned = 0;
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
    43e8:	0039883a 	mov	fp,zero
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
  int fmtLong = 0;
  int fmtBeforeDecimal = 0;
  int fmtAfterDecimal = 0;
  int fmtBase = 0;
  int fmtSigned = 0;
    43ec:	d8000215 	stw	zero,8(sp)
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
  int fmtLong = 0;
  int fmtBeforeDecimal = 0;
  int fmtAfterDecimal = 0;
  int fmtBase = 0;
    43f0:	d8000315 	stw	zero,12(sp)
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
  int fmtLong = 0;
  int fmtBeforeDecimal = 0;
  int fmtAfterDecimal = 0;
    43f4:	002d883a 	mov	r22,zero
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
  int fmtLong = 0;
  int fmtBeforeDecimal = 0;
    43f8:	d8000115 	stw	zero,4(sp)
  {
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
  int fmtLong = 0;
    43fc:	d8000415 	stw	zero,16(sp)
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
    4400:	d8000615 	stw	zero,24(sp)
  int fmtBase = 0;
  int fmtSigned = 0;
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;
    4404:	0021883a 	mov	r16,zero
otherFmtChar:
        if(c == '.')
        {
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
    4408:	05400244 	movi	r21,9
                  {
                  unsigned char d;

                  d = v / p;
                  d += '0';
                  if(d > '9')
    440c:	05c00e44 	movi	r23,57
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;

  while(0 != (c = *w++))
    4410:	00011a06 	br	487c <alt_log_private_printf+0x4cc>
    {
    switch(state)
    4414:	00800044 	movi	r2,1
    4418:	80800c26 	beq	r16,r2,444c <alt_log_private_printf+0x9c>
    441c:	00800084 	movi	r2,2
    4420:	80801626 	beq	r16,r2,447c <alt_log_private_printf+0xcc>
    4424:	8001141e 	bne	r16,zero,4878 <alt_log_private_printf+0x4c8>
      {
      case pfState_chars:
        if(c == '%')
    4428:	20803fcc 	andi	r2,r4,255
    442c:	1080201c 	xori	r2,r2,128
    4430:	10bfe004 	addi	r2,r2,-128
    4434:	00c00944 	movi	r3,37
    4438:	10c0f326 	beq	r2,r3,4808 <alt_log_private_printf+0x458>
          fmtAfterDecimal = -1;
          state = pfState_firstFmtChar;
        }
        else
        {
          alt_log_txchar(c,(char*)base);
    443c:	1009883a 	mov	r4,r2
    4440:	d9400017 	ldw	r5,0(sp)
    4444:	00043340 	call	4334 <alt_log_txchar>
    4448:	00010b06 	br	4878 <alt_log_private_printf+0x4c8>
        }
        break;

      case pfState_firstFmtChar:
        if(c == '0')
    444c:	20803fcc 	andi	r2,r4,255
    4450:	1080201c 	xori	r2,r2,128
    4454:	10bfe004 	addi	r2,r2,-128
    4458:	00c00c04 	movi	r3,48
    445c:	10c0f526 	beq	r2,r3,4834 <alt_log_private_printf+0x484>
        {
          fmtLeadingZero = 1;
          state = pfState_otherFmtChar;
        }
        else if(c == '%')
    4460:	00c00944 	movi	r3,37
    4464:	10c0051e 	bne	r2,r3,447c <alt_log_private_printf+0xcc>
        {
          alt_log_txchar(c,(char*)base);
    4468:	1809883a 	mov	r4,r3
    446c:	d9400017 	ldw	r5,0(sp)
    4470:	00043340 	call	4334 <alt_log_txchar>
          state = pfState_chars;
    4474:	0021883a 	mov	r16,zero
    4478:	0000ff06 	br	4878 <alt_log_private_printf+0x4c8>
        }
        break;

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
    447c:	20803fcc 	andi	r2,r4,255
    4480:	1080201c 	xori	r2,r2,128
    4484:	10bfe004 	addi	r2,r2,-128
    4488:	00c00b84 	movi	r3,46
    448c:	10c0ed26 	beq	r2,r3,4844 <alt_log_private_printf+0x494>
        {
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
    4490:	20bff404 	addi	r2,r4,-48
    4494:	10c03fcc 	andi	r3,r2,255
    4498:	a8c01436 	bltu	r21,r3,44ec <alt_log_private_printf+0x13c>
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
    449c:	b0000c0e 	bge	r22,zero,44d0 <alt_log_private_printf+0x120>
          {
            if(fmtBeforeDecimal < 0)
    44a0:	d8c00117 	ldw	r3,4(sp)
    44a4:	18000216 	blt	r3,zero,44b0 <alt_log_private_printf+0x100>
            {
              fmtBeforeDecimal = 0;
            }
            else
            {
              fmtBeforeDecimal *= 10;
    44a8:	18c002a4 	muli	r3,r3,10
    44ac:	00000106 	br	44b4 <alt_log_private_printf+0x104>
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
          {
            if(fmtBeforeDecimal < 0)
            {
              fmtBeforeDecimal = 0;
    44b0:	0007883a 	mov	r3,zero
            }
            else
            {
              fmtBeforeDecimal *= 10;
            }
            fmtBeforeDecimal += c;
    44b4:	10803fcc 	andi	r2,r2,255
    44b8:	1080201c 	xori	r2,r2,128
    44bc:	10bfe004 	addi	r2,r2,-128
    44c0:	10c5883a 	add	r2,r2,r3
    44c4:	d8800115 	stw	r2,4(sp)
    44c8:	04000084 	movi	r16,2
    44cc:	0000ea06 	br	4878 <alt_log_private_printf+0x4c8>
          }
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
    44d0:	b58002a4 	muli	r22,r22,10
    44d4:	10803fcc 	andi	r2,r2,255
    44d8:	1080201c 	xori	r2,r2,128
    44dc:	10bfe004 	addi	r2,r2,-128
    44e0:	b0ad883a 	add	r22,r22,r2
    44e4:	04000084 	movi	r16,2
    44e8:	0000e306 	br	4878 <alt_log_private_printf+0x4c8>
          }
        }
        else if(c == 'l')
    44ec:	20803fcc 	andi	r2,r4,255
    44f0:	1080201c 	xori	r2,r2,128
    44f4:	10bfe004 	addi	r2,r2,-128
    44f8:	00c01b04 	movi	r3,108
    44fc:	10c0d426 	beq	r2,r3,4850 <alt_log_private_printf+0x4a0>
        {
          fmtLong = 1;
        }
        else                  /* we're up to the letter which determines type */
        {
          switch(c)
    4500:	213fea04 	addi	r4,r4,-88
    4504:	20803fcc 	andi	r2,r4,255
    4508:	00c00804 	movi	r3,32
    450c:	1880d436 	bltu	r3,r2,4860 <alt_log_private_printf+0x4b0>
    4510:	100890ba 	slli	r4,r2,2
    4514:	00800034 	movhi	r2,0
    4518:	10914a04 	addi	r2,r2,17704
    451c:	2089883a 	add	r4,r4,r2
    4520:	20800017 	ldw	r2,0(r4)
    4524:	1000683a 	jmp	r2
    4528:	00004750 	cmplti	zero,zero,285
    452c:	00004860 	cmpeqi	zero,zero,289
    4530:	00004860 	cmpeqi	zero,zero,289
    4534:	00004860 	cmpeqi	zero,zero,289
    4538:	00004860 	cmpeqi	zero,zero,289
    453c:	00004860 	cmpeqi	zero,zero,289
    4540:	00004860 	cmpeqi	zero,zero,289
    4544:	00004860 	cmpeqi	zero,zero,289
    4548:	00004860 	cmpeqi	zero,zero,289
    454c:	00004860 	cmpeqi	zero,zero,289
    4550:	00004860 	cmpeqi	zero,zero,289
    4554:	00004760 	cmpeqi	zero,zero,285
    4558:	000045b8 	rdprs	zero,zero,278
    455c:	00004860 	cmpeqi	zero,zero,289
    4560:	00004860 	cmpeqi	zero,zero,289
    4564:	00004860 	cmpeqi	zero,zero,289
    4568:	00004860 	cmpeqi	zero,zero,289
    456c:	000045b8 	rdprs	zero,zero,278
    4570:	00004860 	cmpeqi	zero,zero,289
    4574:	00004860 	cmpeqi	zero,zero,289
    4578:	00004860 	cmpeqi	zero,zero,289
    457c:	00004860 	cmpeqi	zero,zero,289
    4580:	00004860 	cmpeqi	zero,zero,289
    4584:	000045ac 	andhi	zero,zero,278
    4588:	00004860 	cmpeqi	zero,zero,289
    458c:	00004860 	cmpeqi	zero,zero,289
    4590:	00004860 	cmpeqi	zero,zero,289
    4594:	00004794 	movui	zero,286
    4598:	00004860 	cmpeqi	zero,zero,289
    459c:	0000489c 	xori	zero,zero,290
    45a0:	00004860 	cmpeqi	zero,zero,289
    45a4:	00004860 	cmpeqi	zero,zero,289
    45a8:	00004894 	movui	zero,290
            case 'u':
              fmtSigned = 0;
              goto doIntegerPrint;
            case 'o':
              fmtSigned = 0;
              fmtBase = 8;
    45ac:	00c00204 	movi	r3,8
    45b0:	d8c00315 	stw	r3,12(sp)
    45b4:	0000b906 	br	489c <alt_log_private_printf+0x4ec>
                unsigned long vShrink;  /* used to count digits */
                int sign;
                int digitCount;

                /* Get the value */
                if(fmtLong)
    45b8:	d9000417 	ldw	r4,16(sp)
    45bc:	20000c26 	beq	r4,zero,45f0 <alt_log_private_printf+0x240>
                {
                  if (fmtSigned)
    45c0:	d8800217 	ldw	r2,8(sp)
    45c4:	10000526 	beq	r2,zero,45dc <alt_log_private_printf+0x22c>
                  {
                    v = va_arg(args,long);
    45c8:	d8c00517 	ldw	r3,20(sp)
    45cc:	1c800017 	ldw	r18,0(r3)
    45d0:	18c00104 	addi	r3,r3,4
    45d4:	d8c00515 	stw	r3,20(sp)
    45d8:	0000b606 	br	48b4 <alt_log_private_printf+0x504>
                  }
                  else
                  {
                    v = va_arg(args,unsigned long);
    45dc:	d9000517 	ldw	r4,20(sp)
    45e0:	24800017 	ldw	r18,0(r4)
    45e4:	21000104 	addi	r4,r4,4
    45e8:	d9000515 	stw	r4,20(sp)
    45ec:	0000ae06 	br	48a8 <alt_log_private_printf+0x4f8>
                  }
                }
                else
                {
                  if (fmtSigned)
    45f0:	d8800217 	ldw	r2,8(sp)
    45f4:	10000526 	beq	r2,zero,460c <alt_log_private_printf+0x25c>
                  {
                    v = va_arg(args,int);
    45f8:	d8c00517 	ldw	r3,20(sp)
    45fc:	1c800017 	ldw	r18,0(r3)
    4600:	18c00104 	addi	r3,r3,4
    4604:	d8c00515 	stw	r3,20(sp)
    4608:	0000aa06 	br	48b4 <alt_log_private_printf+0x504>
                  }
                  else
                  {
                    v = va_arg(args,unsigned int);
    460c:	d9000517 	ldw	r4,20(sp)
    4610:	24800017 	ldw	r18,0(r4)
    4614:	21000104 	addi	r4,r4,4
    4618:	d9000515 	stw	r4,20(sp)
    461c:	0000a206 	br	48a8 <alt_log_private_printf+0x4f8>
                /* Strip sign */
                sign = 0;
                  /* (assumes sign bit is #31) */
                if( fmtSigned && (v & (0x80000000)) )
                  {
                  v = ~v + 1;
    4620:	04a5c83a 	sub	r18,zero,r18
                  sign = 1;
    4624:	00800044 	movi	r2,1
    4628:	d8800715 	stw	r2,28(sp)

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
                while( (vShrink = vShrink / fmtBase) > 0 )
    462c:	dcc00317 	ldw	r19,12(sp)
    4630:	9009883a 	mov	r4,r18
    4634:	980b883a 	mov	r5,r19
    4638:	000673c0 	call	673c <__udivsi3>
    463c:	10000926 	beq	r2,zero,4664 <alt_log_private_printf+0x2b4>
    4640:	05000044 	movi	r20,1
    4644:	a021883a 	mov	r16,r20
                  {
                  digitCount++;
    4648:	a5000044 	addi	r20,r20,1
                  p *= fmtBase;
    464c:	84e1383a 	mul	r16,r16,r19

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
                while( (vShrink = vShrink / fmtBase) > 0 )
    4650:	1009883a 	mov	r4,r2
    4654:	980b883a 	mov	r5,r19
    4658:	000673c0 	call	673c <__udivsi3>
    465c:	103ffa1e 	bne	r2,zero,4648 <alt_log_private_printf+0x298>
    4660:	00000206 	br	466c <alt_log_private_printf+0x2bc>
                  }

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
    4664:	05000044 	movi	r20,1
                  sign = 1;
                  }

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
    4668:	a021883a 	mov	r16,r20
                  digitCount++;
                  p *= fmtBase;
                  }

                /* Print leading characters & sign */
                fmtBeforeDecimal -= digitCount;
    466c:	d8c00117 	ldw	r3,4(sp)
    4670:	1d07c83a 	sub	r3,r3,r20
    4674:	d8c00115 	stw	r3,4(sp)
                if(fmtLeadingZero)
    4678:	d9000617 	ldw	r4,24(sp)
    467c:	20000d26 	beq	r4,zero,46b4 <alt_log_private_printf+0x304>
                  {
                  if(sign)
    4680:	d8800717 	ldw	r2,28(sp)
    4684:	10000626 	beq	r2,zero,46a0 <alt_log_private_printf+0x2f0>
                    {
                    alt_log_txchar('-',(char*)base);
    4688:	01000b44 	movi	r4,45
    468c:	d9400017 	ldw	r5,0(sp)
    4690:	00043340 	call	4334 <alt_log_txchar>
                    fmtBeforeDecimal--;
    4694:	d8c00117 	ldw	r3,4(sp)
    4698:	18ffffc4 	addi	r3,r3,-1
    469c:	d8c00115 	stw	r3,4(sp)
                    }
                  alt_log_repchar('0',fmtBeforeDecimal,base);
    46a0:	01000c04 	movi	r4,48
    46a4:	d9400117 	ldw	r5,4(sp)
    46a8:	d9800017 	ldw	r6,0(sp)
    46ac:	000434c0 	call	434c <alt_log_repchar>
    46b0:	00000c06 	br	46e4 <alt_log_private_printf+0x334>
                  }
                else
                  {
                    if(sign)
    46b4:	d9000717 	ldw	r4,28(sp)
    46b8:	20008126 	beq	r4,zero,48c0 <alt_log_private_printf+0x510>
                    {
                      fmtBeforeDecimal--;
    46bc:	d8800117 	ldw	r2,4(sp)
    46c0:	10bfffc4 	addi	r2,r2,-1
    46c4:	d8800115 	stw	r2,4(sp)
                    }
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
    46c8:	01000804 	movi	r4,32
    46cc:	100b883a 	mov	r5,r2
    46d0:	d9800017 	ldw	r6,0(sp)
    46d4:	000434c0 	call	434c <alt_log_repchar>
                    if(sign)
                    {
                      alt_log_txchar('-',(char*)base);
    46d8:	01000b44 	movi	r4,45
    46dc:	d9400017 	ldw	r5,0(sp)
    46e0:	00043340 	call	4334 <alt_log_txchar>
                    }
                  }

                /* Print numbery parts */
                while(p)
    46e4:	80006026 	beq	r16,zero,4868 <alt_log_private_printf+0x4b8>

                  d = v / p;
                  d += '0';
                  if(d > '9')
                  {
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
    46e8:	050001c4 	movi	r20,7
                /* Print numbery parts */
                while(p)
                  {
                  unsigned char d;

                  d = v / p;
    46ec:	9009883a 	mov	r4,r18
    46f0:	800b883a 	mov	r5,r16
    46f4:	000673c0 	call	673c <__udivsi3>
                  d += '0';
    46f8:	10800c04 	addi	r2,r2,48
    46fc:	1009883a 	mov	r4,r2
                  if(d > '9')
    4700:	10c03fcc 	andi	r3,r2,255
    4704:	b8c0052e 	bgeu	r23,r3,471c <alt_log_private_printf+0x36c>
                  {
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
    4708:	e000021e 	bne	fp,zero,4714 <alt_log_private_printf+0x364>
    470c:	010009c4 	movi	r4,39
    4710:	00000106 	br	4718 <alt_log_private_printf+0x368>
    4714:	a009883a 	mov	r4,r20
    4718:	1109883a 	add	r4,r2,r4
                  }
                  alt_log_txchar(d,(char*)base);
    471c:	21003fcc 	andi	r4,r4,255
    4720:	d9400017 	ldw	r5,0(sp)
    4724:	00043340 	call	4334 <alt_log_txchar>

                  v = v % p;
    4728:	9009883a 	mov	r4,r18
    472c:	800b883a 	mov	r5,r16
    4730:	00067440 	call	6744 <__umodsi3>
    4734:	1025883a 	mov	r18,r2
                  p = p / fmtBase;
    4738:	8009883a 	mov	r4,r16
    473c:	980b883a 	mov	r5,r19
    4740:	000673c0 	call	673c <__udivsi3>
    4744:	1021883a 	mov	r16,r2
                      alt_log_txchar('-',(char*)base);
                    }
                  }

                /* Print numbery parts */
                while(p)
    4748:	103fe81e 	bne	r2,zero,46ec <alt_log_private_printf+0x33c>
    474c:	00004a06 	br	4878 <alt_log_private_printf+0x4c8>
              fmtBase = 16;
              goto doIntegerPrint;
            case 'X':
              fmtSigned = 0;
              fmtBase = 16;
              fmtCase = 1;
    4750:	07000044 	movi	fp,1
              fmtSigned = 0;
              fmtBase = 16;
              goto doIntegerPrint;
            case 'X':
              fmtSigned = 0;
              fmtBase = 16;
    4754:	00c00404 	movi	r3,16
    4758:	d8c00315 	stw	r3,12(sp)
              fmtCase = 1;
              goto doIntegerPrint;
    475c:	00004f06 	br	489c <alt_log_private_printf+0x4ec>

            case 'c':
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
    4760:	01000804 	movi	r4,32
    4764:	d8800117 	ldw	r2,4(sp)
    4768:	117fffc4 	addi	r5,r2,-1
    476c:	d9800017 	ldw	r6,0(sp)
    4770:	000434c0 	call	434c <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
    4774:	d8c00517 	ldw	r3,20(sp)
    4778:	1c000104 	addi	r16,r3,4
    477c:	19000017 	ldw	r4,0(r3)
    4780:	d9400017 	ldw	r5,0(sp)
    4784:	00043340 	call	4334 <alt_log_txchar>
    4788:	dc000515 	stw	r16,20(sp)
                while(*s)
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
            } /* switch last letter of fmt */
          state=pfState_chars;
    478c:	0021883a 	mov	r16,zero
              goto doIntegerPrint;

            case 'c':
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
              alt_log_txchar(va_arg(args,int),(char*)base);
              break;
    4790:	00003906 	br	4878 <alt_log_private_printf+0x4c8>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
    4794:	d9000517 	ldw	r4,20(sp)
    4798:	24800104 	addi	r18,r4,4
    479c:	24000017 	ldw	r16,0(r4)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
    47a0:	8009883a 	mov	r4,r16
    47a4:	00041e00 	call	41e0 <strlen>
    47a8:	01000804 	movi	r4,32
    47ac:	d8c00117 	ldw	r3,4(sp)
    47b0:	188bc83a 	sub	r5,r3,r2
    47b4:	d9800017 	ldw	r6,0(sp)
    47b8:	000434c0 	call	434c <alt_log_repchar>

                while(*s)
    47bc:	81000003 	ldbu	r4,0(r16)
    47c0:	20803fcc 	andi	r2,r4,255
    47c4:	1080201c 	xori	r2,r2,128
    47c8:	10bfe004 	addi	r2,r2,-128
    47cc:	10002826 	beq	r2,zero,4870 <alt_log_private_printf+0x4c0>
                  alt_log_txchar(*s++,(char*)base);
    47d0:	84000044 	addi	r16,r16,1
    47d4:	21003fcc 	andi	r4,r4,255
    47d8:	2100201c 	xori	r4,r4,128
    47dc:	213fe004 	addi	r4,r4,-128
    47e0:	d9400017 	ldw	r5,0(sp)
    47e4:	00043340 	call	4334 <alt_log_txchar>
                char *s;

                s = va_arg(args,char *);
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);

                while(*s)
    47e8:	81000003 	ldbu	r4,0(r16)
    47ec:	20803fcc 	andi	r2,r4,255
    47f0:	1080201c 	xori	r2,r2,128
    47f4:	10bfe004 	addi	r2,r2,-128
    47f8:	103ff51e 	bne	r2,zero,47d0 <alt_log_private_printf+0x420>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
    47fc:	dc800515 	stw	r18,20(sp)
                while(*s)
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
            } /* switch last letter of fmt */
          state=pfState_chars;
    4800:	0021883a 	mov	r16,zero
    4804:	00001c06 	br	4878 <alt_log_private_printf+0x4c8>
        {
          fmtLeadingZero = 0;
          fmtLong = 0;
          fmtBase = 10;
          fmtSigned = 1;
          fmtCase = 0; /* Only %X sets this. */
    4808:	0039883a 	mov	fp,zero
        if(c == '%')
        {
          fmtLeadingZero = 0;
          fmtLong = 0;
          fmtBase = 10;
          fmtSigned = 1;
    480c:	01000044 	movi	r4,1
    4810:	d9000215 	stw	r4,8(sp)
      case pfState_chars:
        if(c == '%')
        {
          fmtLeadingZero = 0;
          fmtLong = 0;
          fmtBase = 10;
    4814:	00800284 	movi	r2,10
    4818:	d8800315 	stw	r2,12(sp)
          fmtSigned = 1;
          fmtCase = 0; /* Only %X sets this. */
          fmtBeforeDecimal = -1;
          fmtAfterDecimal = -1;
    481c:	05bfffc4 	movi	r22,-1
          fmtLeadingZero = 0;
          fmtLong = 0;
          fmtBase = 10;
          fmtSigned = 1;
          fmtCase = 0; /* Only %X sets this. */
          fmtBeforeDecimal = -1;
    4820:	dd800115 	stw	r22,4(sp)
      {
      case pfState_chars:
        if(c == '%')
        {
          fmtLeadingZero = 0;
          fmtLong = 0;
    4824:	d8000415 	stw	zero,16(sp)
    switch(state)
      {
      case pfState_chars:
        if(c == '%')
        {
          fmtLeadingZero = 0;
    4828:	d8000615 	stw	zero,24(sp)
          fmtBase = 10;
          fmtSigned = 1;
          fmtCase = 0; /* Only %X sets this. */
          fmtBeforeDecimal = -1;
          fmtAfterDecimal = -1;
          state = pfState_firstFmtChar;
    482c:	2021883a 	mov	r16,r4
    4830:	00001106 	br	4878 <alt_log_private_printf+0x4c8>
        break;

      case pfState_firstFmtChar:
        if(c == '0')
        {
          fmtLeadingZero = 1;
    4834:	00c00044 	movi	r3,1
    4838:	d8c00615 	stw	r3,24(sp)
          state = pfState_otherFmtChar;
    483c:	04000084 	movi	r16,2
    4840:	00000d06 	br	4878 <alt_log_private_printf+0x4c8>

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
        {
          fmtAfterDecimal = 0;
    4844:	002d883a 	mov	r22,zero
    4848:	04000084 	movi	r16,2
    484c:	00000a06 	br	4878 <alt_log_private_printf+0x4c8>
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
          }
        }
        else if(c == 'l')
        {
          fmtLong = 1;
    4850:	01000044 	movi	r4,1
    4854:	d9000415 	stw	r4,16(sp)
    4858:	04000084 	movi	r16,2
    485c:	00000606 	br	4878 <alt_log_private_printf+0x4c8>
                while(*s)
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
            } /* switch last letter of fmt */
          state=pfState_chars;
    4860:	0021883a 	mov	r16,zero
    4864:	00000406 	br	4878 <alt_log_private_printf+0x4c8>
    4868:	0021883a 	mov	r16,zero
    486c:	00000206 	br	4878 <alt_log_private_printf+0x4c8>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
    4870:	dc800515 	stw	r18,20(sp)
                while(*s)
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
            } /* switch last letter of fmt */
          state=pfState_chars;
    4874:	0021883a 	mov	r16,zero
    4878:	8c400044 	addi	r17,r17,1
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;

  while(0 != (c = *w++))
    487c:	89000003 	ldbu	r4,0(r17)
    4880:	20803fcc 	andi	r2,r4,255
    4884:	1080201c 	xori	r2,r2,128
    4888:	10bfe004 	addi	r2,r2,-128
    488c:	103ee11e 	bne	r2,zero,4414 <alt_log_private_printf+0x64>
    4890:	00001006 	br	48d4 <alt_log_private_printf+0x524>
              fmtSigned = 0;
              fmtBase = 8;
              goto doIntegerPrint;
            case 'x':
              fmtSigned = 0;
              fmtBase = 16;
    4894:	00800404 	movi	r2,16
    4898:	d8800315 	stw	r2,12(sp)
                unsigned long vShrink;  /* used to count digits */
                int sign;
                int digitCount;

                /* Get the value */
                if(fmtLong)
    489c:	d8c00417 	ldw	r3,16(sp)
    48a0:	183f4e1e 	bne	r3,zero,45dc <alt_log_private_printf+0x22c>
    48a4:	003f5906 	br	460c <alt_log_private_printf+0x25c>
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
          {
            if(fmtBeforeDecimal < 0)
            {
              fmtBeforeDecimal = 0;
    48a8:	d8000215 	stw	zero,8(sp)
                    v = va_arg(args,unsigned int);
                  }
                }

                /* Strip sign */
                sign = 0;
    48ac:	d8000715 	stw	zero,28(sp)
    48b0:	003f5e06 	br	462c <alt_log_private_printf+0x27c>
                  /* (assumes sign bit is #31) */
                if( fmtSigned && (v & (0x80000000)) )
    48b4:	903f5a16 	blt	r18,zero,4620 <alt_log_private_printf+0x270>
                    v = va_arg(args,unsigned int);
                  }
                }

                /* Strip sign */
                sign = 0;
    48b8:	d8000715 	stw	zero,28(sp)
    48bc:	003f5b06 	br	462c <alt_log_private_printf+0x27c>
                  {
                    if(sign)
                    {
                      fmtBeforeDecimal--;
                    }
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
    48c0:	01000804 	movi	r4,32
    48c4:	d9400117 	ldw	r5,4(sp)
    48c8:	d9800017 	ldw	r6,0(sp)
    48cc:	000434c0 	call	434c <alt_log_repchar>
    48d0:	003f8406 	br	46e4 <alt_log_private_printf+0x334>
          state=pfState_chars;
          }
        break;
      } /* switch */
    } /* while chars left */
  } /* printf */
    48d4:	dfc01117 	ldw	ra,68(sp)
    48d8:	df001017 	ldw	fp,64(sp)
    48dc:	ddc00f17 	ldw	r23,60(sp)
    48e0:	dd800e17 	ldw	r22,56(sp)
    48e4:	dd400d17 	ldw	r21,52(sp)
    48e8:	dd000c17 	ldw	r20,48(sp)
    48ec:	dcc00b17 	ldw	r19,44(sp)
    48f0:	dc800a17 	ldw	r18,40(sp)
    48f4:	dc400917 	ldw	r17,36(sp)
    48f8:	dc000817 	ldw	r16,32(sp)
    48fc:	dec01204 	addi	sp,sp,72
    4900:	f800283a 	ret

00004904 <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
    4904:	defffc04 	addi	sp,sp,-16
    4908:	dfc00015 	stw	ra,0(sp)
    490c:	d9400115 	stw	r5,4(sp)
    4910:	d9800215 	stw	r6,8(sp)
    4914:	d9c00315 	stw	r7,12(sp)
    va_list args;

    va_start (args, fmt);
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
    4918:	01400804 	movi	r5,32
    491c:	d9800104 	addi	r6,sp,4
    4920:	00043b00 	call	43b0 <alt_log_private_printf>
    return (0);
}
    4924:	0005883a 	mov	r2,zero
    4928:	dfc00017 	ldw	ra,0(sp)
    492c:	dec00404 	addi	sp,sp,16
    4930:	f800283a 	ret

00004934 <alt_log_jtag_uart_print_control_reg>:
        return 0;
    }
}

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
    4934:	defffa04 	addi	sp,sp,-24
    4938:	dfc00515 	stw	ra,20(sp)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    493c:	29c00137 	ldwio	r7,4(r5)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
    4940:	22000d17 	ldw	r8,52(r4)
    4944:	20c00c17 	ldw	r3,48(r4)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
    4948:	3881000c 	andi	r2,r7,1024
    494c:	1004d2ba 	srli	r2,r2,10
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
    4950:	d8800015 	stw	r2,0(sp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
    4954:	3880800c 	andi	r2,r7,512
    4958:	1004d27a 	srli	r2,r2,9
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
    495c:	d8800115 	stw	r2,4(sp)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
    4960:	3880400c 	andi	r2,r7,256
    4964:	1004d23a 	srli	r2,r2,8
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
    4968:	d8800215 	stw	r2,8(sp)
{
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
    496c:	3880008c 	andi	r2,r7,2
    4970:	1004d07a 	srli	r2,r2,1
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
    4974:	d8800315 	stw	r2,12(sp)
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
    4978:	3880004c 	andi	r2,r7,1
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
    497c:	d8800415 	stw	r2,16(sp)
    4980:	01000034 	movhi	r4,0
    4984:	211a0a04 	addi	r4,r4,26664
    4988:	300b883a 	mov	r5,r6
    498c:	40cdc83a 	sub	r6,r8,r3
    4990:	380ed43a 	srli	r7,r7,16
    4994:	00049040 	call	4904 <alt_log_printf_proc>
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;

}
    4998:	dfc00517 	ldw	ra,20(sp)
    499c:	dec00604 	addi	sp,sp,24
    49a0:	f800283a 	ret

000049a4 <altera_avalon_jtag_uart_report_log>:
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
    if (alt_log_jtag_uart_alarm_on_flag) {
    49a4:	d0a00283 	ldbu	r2,-32758(gp)
    49a8:	10803fcc 	andi	r2,r2,255
    49ac:	10000d26 	beq	r2,zero,49e4 <altera_avalon_jtag_uart_report_log+0x40>
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
    49b0:	deffff04 	addi	sp,sp,-4
    49b4:	dfc00015 	stw	ra,0(sp)
    49b8:	2005883a 	mov	r2,r4
    if (alt_log_jtag_uart_alarm_on_flag) {
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
        const char* header="JTAG Alarm:";
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
    49bc:	11400017 	ldw	r5,0(r2)
    49c0:	01800034 	movhi	r6,0
    49c4:	319a1c04 	addi	r6,r6,26736
    49c8:	00049340 	call	4934 <alt_log_jtag_uart_print_control_reg>
        return ALT_LOG_JTAG_UART_TICKS;
    49cc:	00800034 	movhi	r2,0
    49d0:	109fbf04 	addi	r2,r2,32508
    49d4:	11000017 	ldw	r4,0(r2)
    49d8:	01400284 	movi	r5,10
    49dc:	000673c0 	call	673c <__udivsi3>
    49e0:	00000206 	br	49ec <altera_avalon_jtag_uart_report_log+0x48>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
    49e4:	0005883a 	mov	r2,zero
    49e8:	f800283a 	ret
    }
}
    49ec:	dfc00017 	ldw	ra,0(sp)
    49f0:	dec00104 	addi	sp,sp,4
    49f4:	f800283a 	ret

000049f8 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
    49f8:	deffff04 	addi	sp,sp,-4
    49fc:	dfc00015 	stw	ra,0(sp)
     const char* header="JTAG Startup Info:";
     alt_log_jtag_uart_print_control_reg(dev, base, header);
    4a00:	01800034 	movhi	r6,0
    4a04:	319a1f04 	addi	r6,r6,26748
    4a08:	00049340 	call	4934 <alt_log_jtag_uart_print_control_reg>
     return;
}
    4a0c:	dfc00017 	ldw	ra,0(sp)
    4a10:	dec00104 	addi	sp,sp,4
    4a14:	f800283a 	ret

00004a18 <alt_log_jtag_uart_isr_proc>:
/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
    if (alt_log_jtag_uart_isr_on_flag) {
    4a18:	d0a00243 	ldbu	r2,-32759(gp)
    4a1c:	10803fcc 	andi	r2,r2,255
    4a20:	10000a26 	beq	r2,zero,4a4c <alt_log_jtag_uart_isr_proc+0x34>

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
    4a24:	deffff04 	addi	sp,sp,-4
    4a28:	dfc00015 	stw	ra,0(sp)
    4a2c:	2805883a 	mov	r2,r5
    4a30:	200b883a 	mov	r5,r4
    if (alt_log_jtag_uart_isr_on_flag) {
        const char* header="JTAG IRQ:";
        alt_log_jtag_uart_print_control_reg(dev, base, header);
    4a34:	1009883a 	mov	r4,r2
    4a38:	01800034 	movhi	r6,0
    4a3c:	319a2404 	addi	r6,r6,26768
    4a40:	00049340 	call	4934 <alt_log_jtag_uart_print_control_reg>
    }
    return;
}
    4a44:	dfc00017 	ldw	ra,0(sp)
    4a48:	dec00104 	addi	sp,sp,4
    4a4c:	f800283a 	ret

00004a50 <alt_log_write>:
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
    if (alt_log_write_on_flag) {
    4a50:	d0a00303 	ldbu	r2,-32756(gp)
    4a54:	10803fcc 	andi	r2,r2,255
    4a58:	10002c26 	beq	r2,zero,4b0c <alt_log_write+0xbc>
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
    4a5c:	defffc04 	addi	sp,sp,-16
    4a60:	dfc00315 	stw	ra,12(sp)
    4a64:	dc800215 	stw	r18,8(sp)
    4a68:	dc400115 	stw	r17,4(sp)
    4a6c:	dc000015 	stw	r16,0(sp)
    if (alt_log_write_on_flag) {
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
    4a70:	2821883a 	mov	r16,r5
    4a74:	008003c4 	movi	r2,15
    4a78:	1140012e 	bgeu	r2,r5,4a80 <alt_log_write+0x30>
    4a7c:	1021883a 	mov	r16,r2

        if (length < 2) return;
    4a80:	00800044 	movi	r2,1
    4a84:	14001c0e 	bge	r2,r16,4af8 <alt_log_write+0xa8>
    4a88:	200b883a 	mov	r5,r4

        strncpy (alt_log_write_buf,ptr,length);
    4a8c:	04400034 	movhi	r17,0
    4a90:	8c5fc104 	addi	r17,r17,32516
    4a94:	8809883a 	mov	r4,r17
    4a98:	800d883a 	mov	r6,r16
    4a9c:	00064380 	call	6438 <strncpy>
    alt_log_write_buf[length-1]='\n';
    4aa0:	8c09883a 	add	r4,r17,r16
    4aa4:	00800284 	movi	r2,10
    4aa8:	20bfffc5 	stb	r2,-1(r4)
    alt_log_write_buf[length]='\r';
    4aac:	00800344 	movi	r2,13
    4ab0:	20800005 	stb	r2,0(r4)
    alt_log_write_buf[length+1]='\0';
    4ab4:	20000045 	stb	zero,1(r4)

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
    4ab8:	04000a0e 	bge	zero,r16,4ae4 <alt_log_write+0x94>
    4abc:	04400034 	movhi	r17,0
    4ac0:	8c5fc104 	addi	r17,r17,32516
    4ac4:	8805883a 	mov	r2,r17
        if (alt_log_write_buf[temp_cnt]== 0x4) {
    4ac8:	01400104 	movi	r5,4
            alt_log_write_buf[temp_cnt]='D';
    4acc:	01801104 	movi	r6,68
    alt_log_write_buf[length+1]='\0';

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
        if (alt_log_write_buf[temp_cnt]== 0x4) {
    4ad0:	10c00007 	ldb	r3,0(r2)
    4ad4:	1940011e 	bne	r3,r5,4adc <alt_log_write+0x8c>
            alt_log_write_buf[temp_cnt]='D';
    4ad8:	11800005 	stb	r6,0(r2)
    4adc:	10800044 	addi	r2,r2,1
    alt_log_write_buf[length]='\r';
    alt_log_write_buf[length+1]='\0';

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
    4ae0:	113ffb1e 	bne	r2,r4,4ad0 <alt_log_write+0x80>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
    4ae4:	01000034 	movhi	r4,0
    4ae8:	211a2704 	addi	r4,r4,26780
    4aec:	01400034 	movhi	r5,0
    4af0:	295fc104 	addi	r5,r5,32516
    4af4:	00049040 	call	4904 <alt_log_printf_proc>
    }
}
    4af8:	dfc00317 	ldw	ra,12(sp)
    4afc:	dc800217 	ldw	r18,8(sp)
    4b00:	dc400117 	ldw	r17,4(sp)
    4b04:	dc000017 	ldw	r16,0(sp)
    4b08:	dec00404 	addi	sp,sp,16
    4b0c:	f800283a 	ret

00004b10 <alt_log_system_clock>:
/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
    if (alt_log_sys_clk_on_flag) {
    4b10:	d0a002c3 	ldbu	r2,-32757(gp)
    4b14:	10803fcc 	andi	r2,r2,255
    4b18:	10001326 	beq	r2,zero,4b68 <alt_log_system_clock+0x58>
    alt_log_sys_clk_count++;
    4b1c:	d0a00e17 	ldw	r2,-32712(gp)
    4b20:	10800044 	addi	r2,r2,1
    4b24:	d0a00e15 	stw	r2,-32712(gp)
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
    4b28:	d0a00e17 	ldw	r2,-32712(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4b2c:	00c00034 	movhi	r3,0
    4b30:	18dfbf04 	addi	r3,r3,32508
    4b34:	18c00017 	ldw	r3,0(r3)
    4b38:	18800b2e 	bgeu	r3,r2,4b68 <alt_log_system_clock+0x58>

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
    4b3c:	deffff04 	addi	sp,sp,-4
    4b40:	dfc00015 	stw	ra,0(sp)
    if (alt_log_sys_clk_on_flag) {
    alt_log_sys_clk_count++;
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
            alt_log_sys_clk_count = 0;
    4b44:	d0200e15 	stw	zero,-32712(gp)
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
    4b48:	d1600d17 	ldw	r5,-32716(gp)
    4b4c:	28800044 	addi	r2,r5,1
    4b50:	d0a00d15 	stw	r2,-32716(gp)
    4b54:	01000034 	movhi	r4,0
    4b58:	211a2b04 	addi	r4,r4,26796
    4b5c:	00049040 	call	4904 <alt_log_printf_proc>
        }
    }
}
    4b60:	dfc00017 	ldw	ra,0(sp)
    4b64:	dec00104 	addi	sp,sp,4
    4b68:	f800283a 	ret

00004b6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4b6c:	defffe04 	addi	sp,sp,-8
    4b70:	dfc00115 	stw	ra,4(sp)
    4b74:	dc000015 	stw	r16,0(sp)
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
    4b78:	00800034 	movhi	r2,0
    4b7c:	109afe04 	addi	r2,r2,27640
    4b80:	10c00017 	ldw	r3,0(r2)
    4b84:	00800044 	movi	r2,1
    4b88:	1880031e 	bne	r3,r2,4b98 <alt_main+0x2c>
    4b8c:	01000034 	movhi	r4,0
    4b90:	211a3104 	addi	r4,r4,26820
    4b94:	00049040 	call	4904 <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4b98:	0009883a 	mov	r4,zero
    4b9c:	0004f080 	call	4f08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
    4ba0:	00800034 	movhi	r2,0
    4ba4:	109afe04 	addi	r2,r2,27640
    4ba8:	10c00017 	ldw	r3,0(r2)
    4bac:	00800044 	movi	r2,1
    4bb0:	1880031e 	bne	r3,r2,4bc0 <alt_main+0x54>
    4bb4:	01000034 	movhi	r4,0
    4bb8:	211a3f04 	addi	r4,r4,26876
    4bbc:	00049040 	call	4904 <alt_log_printf_proc>
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
    4bc0:	00800034 	movhi	r2,0
    4bc4:	109afe04 	addi	r2,r2,27640
    4bc8:	10c00017 	ldw	r3,0(r2)
    4bcc:	00800044 	movi	r2,1
    4bd0:	1880031e 	bne	r3,r2,4be0 <alt_main+0x74>
    4bd4:	01000034 	movhi	r4,0
    4bd8:	211a4d04 	addi	r4,r4,26932
    4bdc:	00049040 	call	4904 <alt_log_printf_proc>
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
    4be0:	00800034 	movhi	r2,0
    4be4:	109afe04 	addi	r2,r2,27640
    4be8:	10c00017 	ldw	r3,0(r2)
    4bec:	00800044 	movi	r2,1
    4bf0:	1880031e 	bne	r3,r2,4c00 <alt_main+0x94>
    4bf4:	01000034 	movhi	r4,0
    4bf8:	211a5b04 	addi	r4,r4,26988
    4bfc:	00049040 	call	4904 <alt_log_printf_proc>
  alt_sys_init();
    4c00:	0004f480 	call	4f48 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
    4c04:	00800034 	movhi	r2,0
    4c08:	109afe04 	addi	r2,r2,27640
    4c0c:	10c00017 	ldw	r3,0(r2)
    4c10:	00800044 	movi	r2,1
    4c14:	1880031e 	bne	r3,r2,4c24 <alt_main+0xb8>
    4c18:	01000034 	movhi	r4,0
    4c1c:	211a6504 	addi	r4,r4,27028
    4c20:	00049040 	call	4904 <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    4c24:	00800034 	movhi	r2,0
    4c28:	109afe04 	addi	r2,r2,27640
    4c2c:	10c00017 	ldw	r3,0(r2)
    4c30:	00800044 	movi	r2,1
    4c34:	1880031e 	bne	r3,r2,4c44 <alt_main+0xd8>
    4c38:	01000034 	movhi	r4,0
    4c3c:	211a6e04 	addi	r4,r4,27064
    4c40:	00049040 	call	4904 <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4c44:	01800034 	movhi	r6,0
    4c48:	319a7604 	addi	r6,r6,27096
    4c4c:	3009883a 	mov	r4,r6
    4c50:	300b883a 	mov	r5,r6
    4c54:	0005f7c0 	call	5f7c <alt_io_redirect>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
    4c58:	00800034 	movhi	r2,0
    4c5c:	109afe04 	addi	r2,r2,27640
    4c60:	10c00017 	ldw	r3,0(r2)
    4c64:	00800044 	movi	r2,1
    4c68:	1880031e 	bne	r3,r2,4c78 <alt_main+0x10c>
    4c6c:	01000034 	movhi	r4,0
    4c70:	211a7904 	addi	r4,r4,27108
    4c74:	00049040 	call	4904 <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4c78:	d1201117 	ldw	r4,-32700(gp)
    4c7c:	d1601017 	ldw	r5,-32704(gp)
    4c80:	d1a00f17 	ldw	r6,-32708(gp)
    4c84:	00041180 	call	4118 <main>
    4c88:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    4c8c:	01000044 	movi	r4,1
    4c90:	0005dc40 	call	5dc4 <close>
  exit (result);
    4c94:	8009883a 	mov	r4,r16
    4c98:	00063c00 	call	63c0 <exit>

00004c9c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c9c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ca0:	00bfff84 	movi	r2,-2
    4ca4:	188a703a 	and	r5,r3,r2
    4ca8:	2801703a 	wrctl	status,r5
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    4cac:	21400017 	ldw	r5,0(r4)
    4cb0:	21800117 	ldw	r6,4(r4)
    4cb4:	29800115 	stw	r6,4(r5)
  entry->previous->next = entry->next;
    4cb8:	21400117 	ldw	r5,4(r4)
    4cbc:	21800017 	ldw	r6,0(r4)
    4cc0:	29800015 	stw	r6,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    4cc4:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    4cc8:	21000015 	stw	r4,0(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    4ccc:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    4cd0:	2084703a 	and	r2,r4,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
    4cd4:	18c0004c 	andi	r3,r3,1
    4cd8:	1884b03a 	or	r2,r3,r2
  
  NIOS2_WRITE_STATUS (status);
    4cdc:	1001703a 	wrctl	status,r2
    4ce0:	f800283a 	ret

00004ce4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    4ce4:	defffb04 	addi	sp,sp,-20
    4ce8:	dfc00415 	stw	ra,16(sp)
    4cec:	dcc00315 	stw	r19,12(sp)
    4cf0:	dc800215 	stw	r18,8(sp)
    4cf4:	dc400115 	stw	r17,4(sp)
    4cf8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    4cfc:	d0e00404 	addi	r3,gp,-32752
    4d00:	1c000017 	ldw	r16,0(r3)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    4d04:	d0a01217 	ldw	r2,-32696(gp)
    4d08:	10800044 	addi	r2,r2,1
    4d0c:	d0a01215 	stw	r2,-32696(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4d10:	80c02026 	beq	r16,r3,4d94 <alt_tick+0xb0>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    4d14:	04c00044 	movi	r19,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4d18:	1825883a 	mov	r18,r3
  {
    next = (alt_alarm*) alarm->llist.next;
    4d1c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    4d20:	80800403 	ldbu	r2,16(r16)
    4d24:	10001526 	beq	r2,zero,4d7c <alt_tick+0x98>
    4d28:	d0a01217 	ldw	r2,-32696(gp)
    4d2c:	1000171e 	bne	r2,zero,4d8c <alt_tick+0xa8>
    {
      alarm->rollover = 0;
    4d30:	80000405 	stb	zero,16(r16)
    4d34:	00001106 	br	4d7c <alt_tick+0x98>

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
      {
        alt_alarm_stop (alarm);
    4d38:	8009883a 	mov	r4,r16
    4d3c:	0004c9c0 	call	4c9c <alt_alarm_stop>
    4d40:	00000606 	br	4d5c <alt_tick+0x78>
      }
      else
      {
        alarm->time += next_callback;
    4d44:	80c00217 	ldw	r3,8(r16)
    4d48:	10c5883a 	add	r2,r2,r3
    4d4c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    4d50:	d0e01217 	ldw	r3,-32696(gp)
    4d54:	10c0012e 	bgeu	r2,r3,4d5c <alt_tick+0x78>
        {
          alarm->rollover = 1;
    4d58:	84c00405 	stb	r19,16(r16)
    4d5c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4d60:	8cbfee1e 	bne	r17,r18,4d1c <alt_tick+0x38>
    4d64:	00000b06 	br	4d94 <alt_tick+0xb0>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    4d68:	80800317 	ldw	r2,12(r16)
    4d6c:	81000517 	ldw	r4,20(r16)
    4d70:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    4d74:	103ff31e 	bne	r2,zero,4d44 <alt_tick+0x60>
    4d78:	003fef06 	br	4d38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    4d7c:	d0e01217 	ldw	r3,-32696(gp)
    4d80:	80800217 	ldw	r2,8(r16)
    4d84:	18bff82e 	bgeu	r3,r2,4d68 <alt_tick+0x84>
    4d88:	003ff406 	br	4d5c <alt_tick+0x78>
    4d8c:	d0a01217 	ldw	r2,-32696(gp)
    4d90:	003ff206 	br	4d5c <alt_tick+0x78>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    4d94:	dfc00417 	ldw	ra,16(sp)
    4d98:	dcc00317 	ldw	r19,12(sp)
    4d9c:	dc800217 	ldw	r18,8(sp)
    4da0:	dc400117 	ldw	r17,4(sp)
    4da4:	dc000017 	ldw	r16,0(sp)
    4da8:	dec00504 	addi	sp,sp,20
    4dac:	f800283a 	ret

00004db0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4db0:	defffb04 	addi	sp,sp,-20
    4db4:	dfc00415 	stw	ra,16(sp)
    4db8:	dcc00315 	stw	r19,12(sp)
    4dbc:	dc800215 	stw	r18,8(sp)
    4dc0:	dc400115 	stw	r17,4(sp)
    4dc4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4dc8:	20002f16 	blt	r4,zero,4e88 <write+0xd8>
    4dcc:	2827883a 	mov	r19,r5
    4dd0:	3025883a 	mov	r18,r6
    4dd4:	24400324 	muli	r17,r4,12
    4dd8:	00800034 	movhi	r2,0
    4ddc:	109f9604 	addi	r2,r2,32344
    4de0:	88a3883a 	add	r17,r17,r2
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4de4:	88800217 	ldw	r2,8(r17)
    4de8:	108000cc 	andi	r2,r2,3
    4dec:	10001a26 	beq	r2,zero,4e58 <write+0xa8>
    4df0:	88800017 	ldw	r2,0(r17)
    4df4:	10800617 	ldw	r2,24(r2)
    4df8:	10001726 	beq	r2,zero,4e58 <write+0xa8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
    4dfc:	2809883a 	mov	r4,r5
    4e00:	300b883a 	mov	r5,r6
    4e04:	0004a500 	call	4a50 <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4e08:	88800017 	ldw	r2,0(r17)
    4e0c:	10800617 	ldw	r2,24(r2)
    4e10:	8809883a 	mov	r4,r17
    4e14:	980b883a 	mov	r5,r19
    4e18:	900d883a 	mov	r6,r18
    4e1c:	103ee83a 	callr	r2
    4e20:	1021883a 	mov	r16,r2
    4e24:	8000230e 	bge	r16,zero,4eb4 <write+0x104>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4e28:	00800034 	movhi	r2,0
    4e2c:	109fb704 	addi	r2,r2,32476
    4e30:	10800017 	ldw	r2,0(r2)
    4e34:	10000226 	beq	r2,zero,4e40 <write+0x90>
    4e38:	103ee83a 	callr	r2
    4e3c:	00000206 	br	4e48 <write+0x98>
    4e40:	00800034 	movhi	r2,0
    4e44:	109fb804 	addi	r2,r2,32480
      {
        ALT_ERRNO = -rval;
    4e48:	0421c83a 	sub	r16,zero,r16
    4e4c:	14000015 	stw	r16,0(r2)
        return -1;
    4e50:	00bfffc4 	movi	r2,-1
    4e54:	00001706 	br	4eb4 <write+0x104>
    4e58:	00800034 	movhi	r2,0
    4e5c:	109fb704 	addi	r2,r2,32476
    4e60:	10800017 	ldw	r2,0(r2)
    4e64:	10000226 	beq	r2,zero,4e70 <write+0xc0>
    4e68:	103ee83a 	callr	r2
    4e6c:	00000206 	br	4e78 <write+0xc8>
    4e70:	00800034 	movhi	r2,0
    4e74:	109fb804 	addi	r2,r2,32480
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    4e78:	00c00344 	movi	r3,13
    4e7c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    4e80:	00bfffc4 	movi	r2,-1
    4e84:	00000b06 	br	4eb4 <write+0x104>
    4e88:	00800034 	movhi	r2,0
    4e8c:	109fb704 	addi	r2,r2,32476
    4e90:	10800017 	ldw	r2,0(r2)
    4e94:	10000226 	beq	r2,zero,4ea0 <write+0xf0>
    4e98:	103ee83a 	callr	r2
    4e9c:	00000206 	br	4ea8 <write+0xf8>
    4ea0:	00800034 	movhi	r2,0
    4ea4:	109fb804 	addi	r2,r2,32480
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    4ea8:	00c01444 	movi	r3,81
    4eac:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    4eb0:	00bfffc4 	movi	r2,-1
}
    4eb4:	dfc00417 	ldw	ra,16(sp)
    4eb8:	dcc00317 	ldw	r19,12(sp)
    4ebc:	dc800217 	ldw	r18,8(sp)
    4ec0:	dc400117 	ldw	r17,4(sp)
    4ec4:	dc000017 	ldw	r16,0(sp)
    4ec8:	dec00504 	addi	sp,sp,20
    4ecc:	f800283a 	ret

00004ed0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4ed0:	defffd04 	addi	sp,sp,-12
    4ed4:	dfc00215 	stw	ra,8(sp)
    4ed8:	df000115 	stw	fp,4(sp)
    4edc:	df000104 	addi	fp,sp,4
    4ee0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4ee4:	e13fff17 	ldw	r4,-4(fp)
    4ee8:	01400034 	movhi	r5,0
    4eec:	295fb304 	addi	r5,r5,32460
    4ef0:	0005e980 	call	5e98 <alt_dev_llist_insert>
}
    4ef4:	e037883a 	mov	sp,fp
    4ef8:	dfc00117 	ldw	ra,4(sp)
    4efc:	df000017 	ldw	fp,0(sp)
    4f00:	dec00204 	addi	sp,sp,8
    4f04:	f800283a 	ret

00004f08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4f08:	defffd04 	addi	sp,sp,-12
    4f0c:	dfc00215 	stw	ra,8(sp)
    4f10:	df000115 	stw	fp,4(sp)
    4f14:	df000104 	addi	fp,sp,4
    4f18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    4f1c:	01000034 	movhi	r4,0
    4f20:	211b2604 	addi	r4,r4,27800
    4f24:	00057c80 	call	57c8 <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4f28:	00802034 	movhi	r2,128
    4f2c:	10800044 	addi	r2,r2,1
    4f30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4f34:	e037883a 	mov	sp,fp
    4f38:	dfc00117 	ldw	ra,4(sp)
    4f3c:	df000017 	ldw	fp,0(sp)
    4f40:	dec00204 	addi	sp,sp,8
    4f44:	f800283a 	ret

00004f48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4f48:	defffe04 	addi	sp,sp,-8
    4f4c:	dfc00115 	stw	ra,4(sp)
    4f50:	df000015 	stw	fp,0(sp)
    4f54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSCLK_TIMER, sysclk_timer);
    4f58:	01001004 	movi	r4,64
    4f5c:	000b883a 	mov	r5,zero
    4f60:	000d883a 	mov	r6,zero
    4f64:	01c01904 	movi	r7,100
    4f68:	00056d80 	call	56d8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    4f6c:	01000034 	movhi	r4,0
    4f70:	211b5704 	addi	r4,r4,27996
    4f74:	000b883a 	mov	r5,zero
    4f78:	01800044 	movi	r6,1
    4f7c:	00051e00 	call	51e0 <altera_avalon_jtag_uart_init>
    4f80:	01000034 	movhi	r4,0
    4f84:	211b4d04 	addi	r4,r4,27956
    4f88:	0004ed00 	call	4ed0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    4f8c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART1, uart1);
    4f90:	01000034 	movhi	r4,0
    4f94:	211f6f04 	addi	r4,r4,32188
    4f98:	01400084 	movi	r5,2
    4f9c:	0005a980 	call	5a98 <my_uart_init>
    4fa0:	01000034 	movhi	r4,0
    4fa4:	211f6504 	addi	r4,r4,32148
    4fa8:	0004ed00 	call	4ed0 <alt_dev_reg>
}
    4fac:	e037883a 	mov	sp,fp
    4fb0:	dfc00117 	ldw	ra,4(sp)
    4fb4:	df000017 	ldw	fp,0(sp)
    4fb8:	dec00204 	addi	sp,sp,8
    4fbc:	f800283a 	ret

00004fc0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4fc0:	deffff04 	addi	sp,sp,-4
    4fc4:	dfc00015 	stw	ra,0(sp)
    4fc8:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4fcc:	21000017 	ldw	r4,0(r4)
    4fd0:	21000a04 	addi	r4,r4,40
    4fd4:	11c00217 	ldw	r7,8(r2)
    4fd8:	00053900 	call	5390 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4fdc:	dfc00017 	ldw	ra,0(sp)
    4fe0:	dec00104 	addi	sp,sp,4
    4fe4:	f800283a 	ret

00004fe8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4fe8:	deffff04 	addi	sp,sp,-4
    4fec:	dfc00015 	stw	ra,0(sp)
    4ff0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4ff4:	21000017 	ldw	r4,0(r4)
    4ff8:	21000a04 	addi	r4,r4,40
    4ffc:	11c00217 	ldw	r7,8(r2)
    5000:	00054f00 	call	54f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    5004:	dfc00017 	ldw	ra,0(sp)
    5008:	dec00104 	addi	sp,sp,4
    500c:	f800283a 	ret

00005010 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    5010:	deffff04 	addi	sp,sp,-4
    5014:	dfc00015 	stw	ra,0(sp)
    5018:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    501c:	21000017 	ldw	r4,0(r4)
    5020:	21000a04 	addi	r4,r4,40
    5024:	11400217 	ldw	r5,8(r2)
    5028:	00052cc0 	call	52cc <altera_avalon_jtag_uart_close>
}
    502c:	dfc00017 	ldw	ra,0(sp)
    5030:	dec00104 	addi	sp,sp,4
    5034:	f800283a 	ret

00005038 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    5038:	deffff04 	addi	sp,sp,-4
    503c:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    5040:	21000017 	ldw	r4,0(r4)
    5044:	21000a04 	addi	r4,r4,40
    5048:	00053080 	call	5308 <altera_avalon_jtag_uart_ioctl>
}
    504c:	dfc00017 	ldw	ra,0(sp)
    5050:	dec00104 	addi	sp,sp,4
    5054:	f800283a 	ret

00005058 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    5058:	20800017 	ldw	r2,0(r4)
    505c:	10800137 	ldwio	r2,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    5060:	1081000c 	andi	r2,r2,1024
    5064:	10000626 	beq	r2,zero,5080 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    5068:	20c00017 	ldw	r3,0(r4)
    506c:	20800817 	ldw	r2,32(r4)
    5070:	10810014 	ori	r2,r2,1024
    5074:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
    5078:	20000915 	stw	zero,36(r4)
    507c:	00000606 	br	5098 <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    5080:	20800917 	ldw	r2,36(r4)
    5084:	00e00034 	movhi	r3,32768
    5088:	18ffff04 	addi	r3,r3,-4
    508c:	18800236 	bltu	r3,r2,5098 <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
    5090:	10800044 	addi	r2,r2,1
    5094:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    5098:	00800034 	movhi	r2,0
    509c:	109fbf04 	addi	r2,r2,32508
    50a0:	10800017 	ldw	r2,0(r2)
    50a4:	f800283a 	ret

000050a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    50a8:	defffd04 	addi	sp,sp,-12
    50ac:	dfc00215 	stw	ra,8(sp)
    50b0:	dc400115 	stw	r17,4(sp)
    50b4:	dc000015 	stw	r16,0(sp)
    50b8:	2021883a 	mov	r16,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    50bc:	24400017 	ldw	r17,0(r4)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
    50c0:	8809883a 	mov	r4,r17
    50c4:	800b883a 	mov	r5,r16
    50c8:	0004a180 	call	4a18 <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    50cc:	89800104 	addi	r6,r17,4
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    50d0:	023fff84 	movi	r8,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    50d4:	027fff44 	movi	r9,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    50d8:	300f883a 	mov	r7,r6
    50dc:	31400037 	ldwio	r5,0(r6)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    50e0:	2880c00c 	andi	r2,r5,768
    50e4:	10003926 	beq	r2,zero,51cc <altera_avalon_jtag_uart_irq+0x124>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    50e8:	2880400c 	andi	r2,r5,256
    50ec:	10001c26 	beq	r2,zero,5160 <altera_avalon_jtag_uart_irq+0xb8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    50f0:	80800a17 	ldw	r2,40(r16)
    50f4:	10800044 	addi	r2,r2,1
    50f8:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
    50fc:	80c00b17 	ldw	r3,44(r16)
    5100:	18801226 	beq	r3,r2,514c <altera_avalon_jtag_uart_irq+0xa4>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    5104:	88800037 	ldwio	r2,0(r17)
    5108:	1009883a 	mov	r4,r2
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    510c:	10e0000c 	andi	r3,r2,32768
    5110:	18000c26 	beq	r3,zero,5144 <altera_avalon_jtag_uart_irq+0x9c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5114:	80c00a17 	ldw	r3,40(r16)
    5118:	80c7883a 	add	r3,r16,r3
    511c:	18800e05 	stb	r2,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5120:	80800a17 	ldw	r2,40(r16)
    5124:	10800044 	addi	r2,r2,1
    5128:	1081ffcc 	andi	r2,r2,2047
    512c:	80800a15 	stw	r2,40(r16)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5130:	80800a17 	ldw	r2,40(r16)
    5134:	10800044 	addi	r2,r2,1
    5138:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
    513c:	80c00b17 	ldw	r3,44(r16)
    5140:	18bff01e 	bne	r3,r2,5104 <altera_avalon_jtag_uart_irq+0x5c>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    5144:	213fffec 	andhi	r4,r4,65535
    5148:	20000526 	beq	r4,zero,5160 <altera_avalon_jtag_uart_irq+0xb8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    514c:	80800817 	ldw	r2,32(r16)
    5150:	1204703a 	and	r2,r2,r8
    5154:	80800815 	stw	r2,32(r16)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    5158:	30800035 	stwio	r2,0(r6)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    515c:	30800037 	ldwio	r2,0(r6)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    5160:	2880800c 	andi	r2,r5,512
    5164:	103fdc26 	beq	r2,zero,50d8 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    5168:	280ad43a 	srli	r5,r5,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    516c:	283fda26 	beq	r5,zero,50d8 <altera_avalon_jtag_uart_irq+0x30>
    5170:	80c00d17 	ldw	r3,52(r16)
    5174:	80800c17 	ldw	r2,48(r16)
    5178:	18800d26 	beq	r3,r2,51b0 <altera_avalon_jtag_uart_irq+0x108>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    517c:	80800d17 	ldw	r2,52(r16)
    5180:	8085883a 	add	r2,r16,r2
    5184:	10820e07 	ldb	r2,2104(r2)
    5188:	88800035 	stwio	r2,0(r17)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    518c:	80800d17 	ldw	r2,52(r16)
    5190:	10800044 	addi	r2,r2,1
    5194:	1081ffcc 	andi	r2,r2,2047
    5198:	80800d15 	stw	r2,52(r16)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    519c:	297fffc4 	addi	r5,r5,-1
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    51a0:	283fcd26 	beq	r5,zero,50d8 <altera_avalon_jtag_uart_irq+0x30>
    51a4:	80c00d17 	ldw	r3,52(r16)
    51a8:	80800c17 	ldw	r2,48(r16)
    51ac:	18bff31e 	bne	r3,r2,517c <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    51b0:	80800817 	ldw	r2,32(r16)
    51b4:	1244703a 	and	r2,r2,r9
    51b8:	80800815 	stw	r2,32(r16)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    51bc:	80c00017 	ldw	r3,0(r16)
    51c0:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    51c4:	38800037 	ldwio	r2,0(r7)
    51c8:	003fc306 	br	50d8 <altera_avalon_jtag_uart_irq+0x30>
      }
    }
  }
}
    51cc:	dfc00217 	ldw	ra,8(sp)
    51d0:	dc400117 	ldw	r17,4(sp)
    51d4:	dc000017 	ldw	r16,0(sp)
    51d8:	dec00304 	addi	sp,sp,12
    51dc:	f800283a 	ret

000051e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    51e0:	defffd04 	addi	sp,sp,-12
    51e4:	dfc00215 	stw	ra,8(sp)
    51e8:	dc000115 	stw	r16,4(sp)
    51ec:	2021883a 	mov	r16,r4
    51f0:	2809883a 	mov	r4,r5
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    51f4:	00800044 	movi	r2,1
    51f8:	80800815 	stw	r2,32(r16)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    51fc:	80c00017 	ldw	r3,0(r16)
    5200:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    5204:	d8000015 	stw	zero,0(sp)
    5208:	300b883a 	mov	r5,r6
    520c:	01800034 	movhi	r6,0
    5210:	31942a04 	addi	r6,r6,20648
    5214:	800f883a 	mov	r7,r16
    5218:	000588c0 	call	588c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    521c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    5220:	81000204 	addi	r4,r16,8
    5224:	00800034 	movhi	r2,0
    5228:	109fbf04 	addi	r2,r2,32508
    522c:	11400017 	ldw	r5,0(r2)
    5230:	01800034 	movhi	r6,0
    5234:	31941604 	addi	r6,r6,20568
    5238:	800f883a 	mov	r7,r16
    523c:	0005d1c0 	call	5d1c <alt_alarm_start>
    5240:	1000030e 	bge	r2,zero,5250 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    5244:	00a00034 	movhi	r2,32768
    5248:	10bfffc4 	addi	r2,r2,-1
    524c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
    5250:	00800034 	movhi	r2,0
    5254:	109fae84 	addi	r2,r2,32442
    5258:	10800003 	ldbu	r2,0(r2)
    525c:	10803fcc 	andi	r2,r2,255
    5260:	00c00044 	movi	r3,1
    5264:	10c00c1e 	bne	r2,r3,5298 <altera_avalon_jtag_uart_init+0xb8>
    5268:	00800034 	movhi	r2,0
    526c:	109fbf04 	addi	r2,r2,32508
    5270:	11000017 	ldw	r4,0(r2)
    5274:	01400284 	movi	r5,10
    5278:	000673c0 	call	673c <__udivsi3>
    527c:	01000034 	movhi	r4,0
    5280:	211fc604 	addi	r4,r4,32536
    5284:	100b883a 	mov	r5,r2
    5288:	01800034 	movhi	r6,0
    528c:	31926904 	addi	r6,r6,18852
    5290:	800f883a 	mov	r7,r16
    5294:	0005d1c0 	call	5d1c <alt_alarm_start>
    5298:	00800034 	movhi	r2,0
    529c:	109fae04 	addi	r2,r2,32440
    52a0:	10800003 	ldbu	r2,0(r2)
    52a4:	10803fcc 	andi	r2,r2,255
    52a8:	00c00044 	movi	r3,1
    52ac:	10c0031e 	bne	r2,r3,52bc <altera_avalon_jtag_uart_init+0xdc>
    52b0:	8009883a 	mov	r4,r16
    52b4:	81400017 	ldw	r5,0(r16)
    52b8:	00049f80 	call	49f8 <alt_log_jtag_uart_startup_info>
}
    52bc:	dfc00217 	ldw	ra,8(sp)
    52c0:	dc000117 	ldw	r16,4(sp)
    52c4:	dec00304 	addi	sp,sp,12
    52c8:	f800283a 	ret

000052cc <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    52cc:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
    52d0:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    52d4:	00000106 	br	52dc <altera_avalon_jtag_uart_close+0x10>
    if (flags & O_NONBLOCK) {
    52d8:	2800071e 	bne	r5,zero,52f8 <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    52dc:	20800d17 	ldw	r2,52(r4)
    52e0:	11800726 	beq	r2,r6,5300 <altera_avalon_jtag_uart_close+0x34>
    52e4:	20c00917 	ldw	r3,36(r4)
    52e8:	20800117 	ldw	r2,4(r4)
    52ec:	18bffa36 	bltu	r3,r2,52d8 <altera_avalon_jtag_uart_close+0xc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    52f0:	0005883a 	mov	r2,zero
    52f4:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    52f8:	00bffd44 	movi	r2,-11
    52fc:	f800283a 	ret
    }
  }

  return 0;
    5300:	0005883a 	mov	r2,zero
}
    5304:	f800283a 	ret

00005308 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    5308:	009a8044 	movi	r2,27137
    530c:	28800326 	beq	r5,r2,531c <altera_avalon_jtag_uart_ioctl+0x14>
    5310:	009a8084 	movi	r2,27138
    5314:	28800f26 	beq	r5,r2,5354 <altera_avalon_jtag_uart_ioctl+0x4c>
    5318:	00001706 	br	5378 <altera_avalon_jtag_uart_ioctl+0x70>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    531c:	20c00117 	ldw	r3,4(r4)
    5320:	00a00034 	movhi	r2,32768
    5324:	10bfffc4 	addi	r2,r2,-1
    5328:	18801526 	beq	r3,r2,5380 <altera_avalon_jtag_uart_ioctl+0x78>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    532c:	30800017 	ldw	r2,0(r6)
    5330:	10ffff84 	addi	r3,r2,-2
    5334:	01600034 	movhi	r5,32768
    5338:	297fff04 	addi	r5,r5,-4
    533c:	28c0022e 	bgeu	r5,r3,5348 <altera_avalon_jtag_uart_ioctl+0x40>
    5340:	00a00034 	movhi	r2,32768
    5344:	10bfff84 	addi	r2,r2,-2
    5348:	20800115 	stw	r2,4(r4)
      rc = 0;
    534c:	0005883a 	mov	r2,zero
    5350:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    5354:	20c00117 	ldw	r3,4(r4)
    5358:	00a00034 	movhi	r2,32768
    535c:	10bfffc4 	addi	r2,r2,-1
    5360:	18800926 	beq	r3,r2,5388 <altera_avalon_jtag_uart_ioctl+0x80>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    5364:	20800917 	ldw	r2,36(r4)
    5368:	10c5803a 	cmpltu	r2,r2,r3
    536c:	30800015 	stw	r2,0(r6)
      rc = 0;
    5370:	0005883a 	mov	r2,zero
    5374:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    5378:	00bff9c4 	movi	r2,-25
    537c:	f800283a 	ret
    5380:	00bff9c4 	movi	r2,-25
    5384:	f800283a 	ret
    5388:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    538c:	f800283a 	ret

00005390 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    5390:	0180470e 	bge	zero,r6,54b0 <altera_avalon_jtag_uart_read+0x120>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    5394:	defff604 	addi	sp,sp,-40
    5398:	dfc00915 	stw	ra,36(sp)
    539c:	df000815 	stw	fp,32(sp)
    53a0:	ddc00715 	stw	r23,28(sp)
    53a4:	dd800615 	stw	r22,24(sp)
    53a8:	dd400515 	stw	r21,20(sp)
    53ac:	dd000415 	stw	r20,16(sp)
    53b0:	dcc00315 	stw	r19,12(sp)
    53b4:	dc800215 	stw	r18,8(sp)
    53b8:	dc400115 	stw	r17,4(sp)
    53bc:	dc000015 	stw	r16,0(sp)
    53c0:	2025883a 	mov	r18,r4
    53c4:	282d883a 	mov	r22,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    53c8:	05420004 	movi	r21,2048
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    53cc:	3dd0000c 	andi	r23,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    53d0:	b029883a 	mov	r20,r22
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    53d4:	94c00a17 	ldw	r19,40(r18)
      out = sp->rx_out;
    53d8:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    53dc:	9c400236 	bltu	r19,r17,53e8 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    53e0:	9c61c83a 	sub	r16,r19,r17
    53e4:	00000106 	br	53ec <altera_avalon_jtag_uart_read+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    53e8:	ac61c83a 	sub	r16,r21,r17

      if (n == 0)
    53ec:	80000e26 	beq	r16,zero,5428 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    53f0:	3039883a 	mov	fp,r6
    53f4:	3400012e 	bgeu	r6,r16,53fc <altera_avalon_jtag_uart_read+0x6c>
    53f8:	3021883a 	mov	r16,r6
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    53fc:	89400e04 	addi	r5,r17,56
    5400:	a009883a 	mov	r4,r20
    5404:	914b883a 	add	r5,r18,r5
    5408:	800d883a 	mov	r6,r16
    540c:	00064100 	call	6410 <memcpy>
      ptr   += n;
    5410:	a429883a 	add	r20,r20,r16
      space -= n;
    5414:	e40dc83a 	sub	r6,fp,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5418:	8461883a 	add	r16,r16,r17
    541c:	8401ffcc 	andi	r16,r16,2047
    5420:	94000b15 	stw	r16,44(r18)
    }
    while (space > 0);
    5424:	01bfeb16 	blt	zero,r6,53d4 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    5428:	a580111e 	bne	r20,r22,5470 <altera_avalon_jtag_uart_read+0xe0>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    542c:	b8000a1e 	bne	r23,zero,5458 <altera_avalon_jtag_uart_read+0xc8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    5430:	90800a17 	ldw	r2,40(r18)
    5434:	14c0031e 	bne	r2,r19,5444 <altera_avalon_jtag_uart_read+0xb4>
    5438:	90c00917 	ldw	r3,36(r18)
    543c:	90800117 	ldw	r2,4(r18)
    5440:	18bffb36 	bltu	r3,r2,5430 <altera_avalon_jtag_uart_read+0xa0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    5444:	90800a17 	ldw	r2,40(r18)
    5448:	14c00526 	beq	r2,r19,5460 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    544c:	01bfe016 	blt	zero,r6,53d0 <altera_avalon_jtag_uart_read+0x40>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    5450:	00bffec4 	movi	r2,-5
    5454:	00001a06 	br	54c0 <altera_avalon_jtag_uart_read+0x130>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    5458:	00bffd44 	movi	r2,-11
    545c:	00001806 	br	54c0 <altera_avalon_jtag_uart_read+0x130>
  else
    return -EIO;
    5460:	00bffec4 	movi	r2,-5
    5464:	00001606 	br	54c0 <altera_avalon_jtag_uart_read+0x130>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    5468:	00bffd44 	movi	r2,-11
    546c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5470:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5474:	00bfff84 	movi	r2,-2
    5478:	1888703a 	and	r4,r3,r2
    547c:	2001703a 	wrctl	status,r4

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    5480:	91000817 	ldw	r4,32(r18)
    5484:	21000054 	ori	r4,r4,1
    5488:	91000815 	stw	r4,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    548c:	91400017 	ldw	r5,0(r18)
    5490:	29000135 	stwio	r4,4(r5)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    5494:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    5498:	2084703a 	and	r2,r4,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
    549c:	18c0004c 	andi	r3,r3,1
    54a0:	1884b03a 	or	r2,r3,r2
  
  NIOS2_WRITE_STATUS (status);
    54a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    54a8:	a585c83a 	sub	r2,r20,r22
    54ac:	00000406 	br	54c0 <altera_avalon_jtag_uart_read+0x130>
  else if (flags & O_NONBLOCK)
    54b0:	39d0000c 	andi	r7,r7,16384
    54b4:	383fec1e 	bne	r7,zero,5468 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
  else
    return -EIO;
    54b8:	00bffec4 	movi	r2,-5
    54bc:	f800283a 	ret
}
    54c0:	dfc00917 	ldw	ra,36(sp)
    54c4:	df000817 	ldw	fp,32(sp)
    54c8:	ddc00717 	ldw	r23,28(sp)
    54cc:	dd800617 	ldw	r22,24(sp)
    54d0:	dd400517 	ldw	r21,20(sp)
    54d4:	dd000417 	ldw	r20,16(sp)
    54d8:	dcc00317 	ldw	r19,12(sp)
    54dc:	dc800217 	ldw	r18,8(sp)
    54e0:	dc400117 	ldw	r17,4(sp)
    54e4:	dc000017 	ldw	r16,0(sp)
    54e8:	dec00a04 	addi	sp,sp,40
    54ec:	f800283a 	ret

000054f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    54f0:	defff404 	addi	sp,sp,-48
    54f4:	dfc00b15 	stw	ra,44(sp)
    54f8:	df000a15 	stw	fp,40(sp)
    54fc:	ddc00915 	stw	r23,36(sp)
    5500:	dd800815 	stw	r22,32(sp)
    5504:	dd400715 	stw	r21,28(sp)
    5508:	dd000615 	stw	r20,24(sp)
    550c:	dcc00515 	stw	r19,20(sp)
    5510:	dc800415 	stw	r18,16(sp)
    5514:	dc400315 	stw	r17,12(sp)
    5518:	dc000215 	stw	r16,8(sp)
    551c:	2021883a 	mov	r16,r4
    5520:	d9400015 	stw	r5,0(sp)
    5524:	d9c00115 	stw	r7,4(sp)
    5528:	2829883a 	mov	r20,r5
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    552c:	0023883a 	mov	r17,zero
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5530:	057fff84 	movi	r21,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    5534:	3dd0000c 	andi	r23,r7,16384
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    5538:	0701ffc4 	movi	fp,2047
    553c:	00001906 	br	55a4 <altera_avalon_jtag_uart_write+0xb4>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    5540:	84c00c17 	ldw	r19,48(r16)
      out = sp->tx_out;
    5544:	84400d17 	ldw	r17,52(r16)

      if (in < out)
    5548:	9c40032e 	bgeu	r19,r17,5558 <altera_avalon_jtag_uart_write+0x68>
    554c:	8cbfffc4 	addi	r18,r17,-1
        n = out - 1 - in;
    5550:	94e5c83a 	sub	r18,r18,r19
    5554:	00000506 	br	556c <altera_avalon_jtag_uart_write+0x7c>
      else if (out > 0)
    5558:	88000326 	beq	r17,zero,5568 <altera_avalon_jtag_uart_write+0x78>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    555c:	00820004 	movi	r2,2048
    5560:	14e5c83a 	sub	r18,r2,r19
    5564:	00000106 	br	556c <altera_avalon_jtag_uart_write+0x7c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    5568:	e4e5c83a 	sub	r18,fp,r19

      if (n == 0)
    556c:	90000e26 	beq	r18,zero,55a8 <altera_avalon_jtag_uart_write+0xb8>
        break;

      if (n > count)
    5570:	302d883a 	mov	r22,r6
    5574:	3480012e 	bgeu	r6,r18,557c <altera_avalon_jtag_uart_write+0x8c>
    5578:	3025883a 	mov	r18,r6
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    557c:	99020e04 	addi	r4,r19,2104
    5580:	8109883a 	add	r4,r16,r4
    5584:	a00b883a 	mov	r5,r20
    5588:	900d883a 	mov	r6,r18
    558c:	00064100 	call	6410 <memcpy>
      ptr   += n;
    5590:	a4a9883a 	add	r20,r20,r18
      count -= n;
    5594:	b48dc83a 	sub	r6,r22,r18

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5598:	94e5883a 	add	r18,r18,r19
    559c:	9481ffcc 	andi	r18,r18,2047
    55a0:	84800c15 	stw	r18,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    55a4:	01bfe616 	blt	zero,r6,5540 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55a8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55ac:	2544703a 	and	r2,r4,r21
    55b0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    55b4:	80800817 	ldw	r2,32(r16)
    55b8:	10800094 	ori	r2,r2,2
    55bc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    55c0:	80c00017 	ldw	r3,0(r16)
    55c4:	18800135 	stwio	r2,4(r3)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    55c8:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    55cc:	1546703a 	and	r3,r2,r21
  status |= (context & NIOS2_STATUS_PIE_MSK);
    55d0:	2080004c 	andi	r2,r4,1
    55d4:	10c4b03a 	or	r2,r2,r3
  
  NIOS2_WRITE_STATUS (status);
    55d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    55dc:	0180090e 	bge	zero,r6,5604 <altera_avalon_jtag_uart_write+0x114>
    {
      if (flags & O_NONBLOCK)
    55e0:	b800181e 	bne	r23,zero,5644 <altera_avalon_jtag_uart_write+0x154>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    55e4:	80800d17 	ldw	r2,52(r16)
    55e8:	1440031e 	bne	r2,r17,55f8 <altera_avalon_jtag_uart_write+0x108>
    55ec:	80c00917 	ldw	r3,36(r16)
    55f0:	80800117 	ldw	r2,4(r16)
    55f4:	18bffb36 	bltu	r3,r2,55e4 <altera_avalon_jtag_uart_write+0xf4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    55f8:	80800917 	ldw	r2,36(r16)
    55fc:	103fe926 	beq	r2,zero,55a4 <altera_avalon_jtag_uart_write+0xb4>
    5600:	00000c06 	br	5634 <altera_avalon_jtag_uart_write+0x144>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    5604:	d8c00017 	ldw	r3,0(sp)
    5608:	a0c00326 	beq	r20,r3,5618 <altera_avalon_jtag_uart_write+0x128>
    return ptr - start;
    560c:	d8c00017 	ldw	r3,0(sp)
    5610:	a0c5c83a 	sub	r2,r20,r3
    5614:	00000e06 	br	5650 <altera_avalon_jtag_uart_write+0x160>
  else if (flags & O_NONBLOCK)
    5618:	d8c00117 	ldw	r3,4(sp)
    561c:	1890000c 	andi	r2,r3,16384
    5620:	1000021e 	bne	r2,zero,562c <altera_avalon_jtag_uart_write+0x13c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    5624:	00bffec4 	movi	r2,-5
    5628:	00000906 	br	5650 <altera_avalon_jtag_uart_write+0x160>
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    562c:	00bffd44 	movi	r2,-11
    5630:	00000706 	br	5650 <altera_avalon_jtag_uart_write+0x160>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    5634:	d8800017 	ldw	r2,0(sp)
    5638:	a0bff41e 	bne	r20,r2,560c <altera_avalon_jtag_uart_write+0x11c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    563c:	00bffec4 	movi	r2,-5
    5640:	00000306 	br	5650 <altera_avalon_jtag_uart_write+0x160>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    5644:	d8c00017 	ldw	r3,0(sp)
    5648:	a0fff01e 	bne	r20,r3,560c <altera_avalon_jtag_uart_write+0x11c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    564c:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    5650:	dfc00b17 	ldw	ra,44(sp)
    5654:	df000a17 	ldw	fp,40(sp)
    5658:	ddc00917 	ldw	r23,36(sp)
    565c:	dd800817 	ldw	r22,32(sp)
    5660:	dd400717 	ldw	r21,28(sp)
    5664:	dd000617 	ldw	r20,24(sp)
    5668:	dcc00517 	ldw	r19,20(sp)
    566c:	dc800417 	ldw	r18,16(sp)
    5670:	dc400317 	ldw	r17,12(sp)
    5674:	dc000217 	ldw	r16,8(sp)
    5678:	dec00c04 	addi	sp,sp,48
    567c:	f800283a 	ret

00005680 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    5680:	defffd04 	addi	sp,sp,-12
    5684:	dfc00215 	stw	ra,8(sp)
    5688:	dc400115 	stw	r17,4(sp)
    568c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    5690:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    5694:	20800137 	ldwio	r2,4(r4)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();
    5698:	0004b100 	call	4b10 <alt_log_system_clock>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    569c:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    56a0:	043fff84 	movi	r16,-2
    56a4:	8c04703a 	and	r2,r17,r16
    56a8:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    56ac:	0004ce40 	call	4ce4 <alt_tick>
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    56b0:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    56b4:	1420703a 	and	r16,r2,r16
  status |= (context & NIOS2_STATUS_PIE_MSK);
    56b8:	8c40004c 	andi	r17,r17,1
    56bc:	8c20b03a 	or	r16,r17,r16
  
  NIOS2_WRITE_STATUS (status);
    56c0:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    56c4:	dfc00217 	ldw	ra,8(sp)
    56c8:	dc400117 	ldw	r17,4(sp)
    56cc:	dc000017 	ldw	r16,0(sp)
    56d0:	dec00304 	addi	sp,sp,12
    56d4:	f800283a 	ret

000056d8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    56d8:	defffe04 	addi	sp,sp,-8
    56dc:	dfc00115 	stw	ra,4(sp)
    56e0:	2005883a 	mov	r2,r4
    56e4:	2809883a 	mov	r4,r5
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    56e8:	00c00034 	movhi	r3,0
    56ec:	18dfbf04 	addi	r3,r3,32508
    56f0:	18c00017 	ldw	r3,0(r3)
    56f4:	1800031e 	bne	r3,zero,5704 <alt_avalon_timer_sc_init+0x2c>
  {
    _alt_tick_rate = nticks;
    56f8:	00c00034 	movhi	r3,0
    56fc:	18dfbf04 	addi	r3,r3,32508
    5700:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    5704:	00c001c4 	movi	r3,7
    5708:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    570c:	d8000015 	stw	zero,0(sp)
    5710:	300b883a 	mov	r5,r6
    5714:	01800034 	movhi	r6,0
    5718:	3195a004 	addi	r6,r6,22144
    571c:	100f883a 	mov	r7,r2
    5720:	000588c0 	call	588c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    5724:	dfc00117 	ldw	ra,4(sp)
    5728:	dec00204 	addi	sp,sp,8
    572c:	f800283a 	ret

00005730 <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5730:	0030e03a 	nextpc	et
    5734:	00057b01 	jmpi	57b0 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5740:	0030e03a 	nextpc	et
    5744:	00057b01 	jmpi	57b0 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5750:	0030e03a 	nextpc	et
    5754:	00057b01 	jmpi	57b0 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5760:	0030e03a 	nextpc	et
    5764:	00057b01 	jmpi	57b0 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5770:	0030e03a 	nextpc	et
    5774:	00057b01 	jmpi	57b0 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5780:	0030e03a 	nextpc	et
    5784:	00057b01 	jmpi	57b0 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    5790:	0030e03a 	nextpc	et
    5794:	00057b01 	jmpi	57b0 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
    57a0:	0030e03a 	nextpc	et
    57a4:	00057b01 	jmpi	57b0 <alt_shadow_non_preemptive_interrupt>
	...

000057b0 <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
    57b0:	c4000117 	ldw	r16,4(et)

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
    57b4:	dec00038 	rdprs	sp,sp,0
  /*
   * Notify the operating system that we are at interrupt level.
   */
    ALT_OS_INT_ENTER_ASM

    ldw r4, 8(et)               /* load isr_context */
    57b8:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
    57bc:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
    57c0:	ef7fff04 	addi	ea,ea,-4
    eret
    57c4:	ef80083a 	eret

000057c8 <alt_vic_irq_init>:
{
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
    57c8:	20800117 	ldw	r2,4(r4)
    57cc:	1085883a 	add	r2,r2,r2
    57d0:	1085883a 	add	r2,r2,r2
    57d4:	d0e01404 	addi	r3,gp,-32688
    57d8:	1885883a 	add	r2,r3,r2
    57dc:	11000015 	stw	r4,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
    57e0:	20800017 	ldw	r2,0(r4)
    57e4:	00ffffc4 	movi	r3,-1
    57e8:	10c02235 	stwio	r3,136(r2)

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    57ec:	20800217 	ldw	r2,8(r4)
    57f0:	10001e26 	beq	r2,zero,586c <alt_vic_irq_init+0xa4>
    57f4:	21400704 	addi	r5,r4,28
    57f8:	0007883a 	mov	r3,zero
    57fc:	18c5883a 	add	r2,r3,r3
    5800:	1085883a 	add	r2,r2,r2
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    5804:	21800017 	ldw	r6,0(r4)
    5808:	3085883a 	add	r2,r6,r2
    580c:	29800017 	ldw	r6,0(r5)
    5810:	11800035 	stwio	r6,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
    5814:	18c00044 	addi	r3,r3,1
    5818:	29400104 	addi	r5,r5,4
    581c:	20800217 	ldw	r2,8(r4)
    5820:	18bff636 	bltu	r3,r2,57fc <alt_vic_irq_init+0x34>
    5824:	00001106 	br	586c <alt_vic_irq_init+0xa4>
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
    5828:	19400017 	ldw	r5,0(r3)
    582c:	2980081e 	bne	r5,r6,5850 <alt_vic_irq_init+0x88>
    5830:	00000106 	br	5838 <alt_vic_irq_init+0x70>
    5834:	0005883a 	mov	r2,zero
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
    5838:	21400017 	ldw	r5,0(r4)
    583c:	20c00417 	ldw	r3,16(r4)
    5840:	180690fa 	slli	r3,r3,3
    5844:	10c4b03a 	or	r2,r2,r3
    5848:	28802835 	stwio	r2,160(r5)
                (i | (pdev->daisy_chain_present << ALTERA_VIC_CONFIG_DC_OFST)));
            break;
    584c:	00000306 	br	585c <alt_vic_irq_init+0x94>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    5850:	10800044 	addi	r2,r2,1
    5854:	18c00104 	addi	r3,r3,4
    5858:	11fff31e 	bne	r2,r7,5828 <alt_vic_irq_init+0x60>
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
    585c:	20800017 	ldw	r2,0(r4)
    5860:	20c00617 	ldw	r3,24(r4)
    5864:	10c02a35 	stwio	r3,168(r2)
    5868:	f800283a 	ret
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
    586c:	21800517 	ldw	r6,20(r4)
    5870:	00800104 	movi	r2,4
    5874:	30bfef26 	beq	r6,r2,5834 <alt_vic_irq_init+0x6c>
    5878:	00c00034 	movhi	r3,0
    587c:	18da8904 	addi	r3,r3,27172
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    5880:	00800044 	movi	r2,1
    5884:	01c00204 	movi	r7,8
    5888:	003fe706 	br	5828 <alt_vic_irq_init+0x60>

0000588c <alt_ic_isr_register>:
{
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
    588c:	2000211e 	bne	r4,zero,5914 <alt_ic_isr_register+0x88>
        return -1;

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
    5890:	00800034 	movhi	r2,0
    5894:	109fc004 	addi	r2,r2,32512
    5898:	11000017 	ldw	r4,0(r2)

    if(irq < pdev->num_of_intr_ports)
    589c:	20800217 	ldw	r2,8(r4)
    58a0:	28801e2e 	bgeu	r5,r2,591c <alt_ic_isr_register+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    58a4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    58a8:	00ffff84 	movi	r3,-2
    58ac:	10c6703a 	and	r3,r2,r3
    58b0:	1801703a 	wrctl	status,r3
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
    58b4:	20c00517 	ldw	r3,20(r4)
    58b8:	28c7383a 	mul	r3,r5,r3
    58bc:	22000617 	ldw	r8,24(r4)
    58c0:	40c7883a 	add	r3,r8,r3

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
    58c4:	19800215 	stw	r6,8(r3)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
    58c8:	19c00315 	stw	r7,12(r3)

        if(isr)
    58cc:	30000526 	beq	r6,zero,58e4 <alt_ic_isr_register+0x58>
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
    58d0:	21000017 	ldw	r4,0(r4)
    58d4:	00c00044 	movi	r3,1
    58d8:	194a983a 	sll	r5,r3,r5
    58dc:	21402135 	stwio	r5,132(r4)
    58e0:	00000406 	br	58f4 <alt_ic_isr_register+0x68>
        }
        else
        {
            /* Disable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
    58e4:	21000017 	ldw	r4,0(r4)
    58e8:	00c00044 	movi	r3,1
    58ec:	194a983a 	sll	r5,r3,r5
    58f0:	21402235 	stwio	r5,136(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    58f4:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    58f8:	00ffff84 	movi	r3,-2
    58fc:	20c6703a 	and	r3,r4,r3
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5900:	1080004c 	andi	r2,r2,1
    5904:	1884b03a 	or	r2,r3,r2
  
  NIOS2_WRITE_STATUS (status);
    5908:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
    590c:	0005883a 	mov	r2,zero
    5910:	f800283a 	ret
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
        return -1;
    5914:	00bfffc4 	movi	r2,-1
    5918:	f800283a 	ret
        alt_irq_enable_all(status);

        return 0;
    }

    return -1;
    591c:	00bfffc4 	movi	r2,-1
}
    5920:	f800283a 	ret

00005924 <my_uart_read_fd>:
 *
 */

int 
my_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    5924:	deffff04 	addi	sp,sp,-4
    5928:	dfc00015 	stw	ra,0(sp)
    592c:	2005883a 	mov	r2,r4
    my_uart_dev* dev = (my_uart_dev*) fd->dev; 

    return my_uart_read(&dev->state, buffer, space,
    5930:	21000017 	ldw	r4,0(r4)
    5934:	21000a04 	addi	r4,r4,40
    5938:	11c00217 	ldw	r7,8(r2)
    593c:	0005ad40 	call	5ad4 <my_uart_read>
      fd->fd_flags);
}
    5940:	dfc00017 	ldw	ra,0(sp)
    5944:	dec00104 	addi	sp,sp,4
    5948:	f800283a 	ret

0000594c <my_uart_write_fd>:

int 
my_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    594c:	deffff04 	addi	sp,sp,-4
    5950:	dfc00015 	stw	ra,0(sp)
    5954:	2005883a 	mov	r2,r4
    my_uart_dev* dev = (my_uart_dev*) fd->dev; 

    return my_uart_write(&dev->state, buffer, space,
    5958:	21000017 	ldw	r4,0(r4)
    595c:	21000a04 	addi	r4,r4,40
    5960:	11c00217 	ldw	r7,8(r2)
    5964:	0005bf40 	call	5bf4 <my_uart_write>
      fd->fd_flags);
}
    5968:	dfc00017 	ldw	ra,0(sp)
    596c:	dec00104 	addi	sp,sp,4
    5970:	f800283a 	ret

00005974 <my_uart_irq>:
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_MY_UART_STATUS(base);
    5974:	20800017 	ldw	r2,0(r4)
    5978:	10800204 	addi	r2,r2,8
    597c:	10c00037 	ldwio	r3,0(r2)

  /* Clear any error flags set at the device */

  IOWR_MY_UART_STATUS(base, 0);
    5980:	10000035 	stwio	zero,0(r2)

  /* process a read irq */
 
  if (status & MY_UART_STATUS_RRDY_MSK)
    5984:	1880200c 	andi	r2,r3,128
    5988:	10001726 	beq	r2,zero,59e8 <my_uart_irq+0x74>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    598c:	20800317 	ldw	r2,12(r4)
    ALT_FLAG_POST (sp->events, MY_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & MY_UART_BUF_MSK;
    5990:	20800317 	ldw	r2,12(r4)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_MY_UART_RXDATA(sp->base);
    5994:	21400317 	ldw	r5,12(r4)
    5998:	21800017 	ldw	r6,0(r4)
    599c:	31800037 	ldwio	r6,0(r6)
    59a0:	214b883a 	add	r5,r4,r5
    59a4:	29800705 	stb	r6,28(r5)

  /* If there was an error, discard the data */

  if (status & (MY_UART_STATUS_PE_MSK | 
    59a8:	194000cc 	andi	r5,r3,3
    59ac:	28000e1e 	bne	r5,zero,59e8 <my_uart_irq+0x74>
    ALT_FLAG_POST (sp->events, MY_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & MY_UART_BUF_MSK;
    59b0:	10800044 	addi	r2,r2,1
    59b4:	10800fcc 	andi	r2,r2,63
                  MY_UART_STATUS_FE_MSK))
  {
    return;
  }

  sp->rx_end = next;
    59b8:	20800315 	stw	r2,12(r4)

  next = (sp->rx_end + 1) & MY_UART_BUF_MSK;
    59bc:	20800317 	ldw	r2,12(r4)
    59c0:	10800044 	addi	r2,r2,1
    59c4:	10800fcc 	andi	r2,r2,63
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    59c8:	21400217 	ldw	r5,8(r4)
    59cc:	1140061e 	bne	r2,r5,59e8 <my_uart_irq+0x74>
  {
    sp->ctrl &= ~MY_UART_CONTROL_RRDY_MSK;
    59d0:	21400117 	ldw	r5,4(r4)
    59d4:	00bfdfc4 	movi	r2,-129
    59d8:	2884703a 	and	r2,r5,r2
    59dc:	20800115 	stw	r2,4(r4)
    IOWR_MY_UART_CONTROL(sp->base, sp->ctrl); 
    59e0:	21400017 	ldw	r5,0(r4)
    59e4:	28800335 	stwio	r2,12(r5)
    my_uart_rxirq(sp, status);
  }

  /* process a write irq */

  if (status & (MY_UART_STATUS_TRDY_MSK | 
    59e8:	1881100c 	andi	r2,r3,1088
    59ec:	10002926 	beq	r2,zero,5a94 <my_uart_irq+0x120>
static void 
my_uart_txirq(my_uart_state* sp, alt_u32 status)
{
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    59f0:	21400417 	ldw	r5,16(r4)
    59f4:	20800517 	ldw	r2,20(r4)
    59f8:	28801c26 	beq	r5,r2,5a6c <my_uart_irq+0xf8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & MY_UART_FC) ||
    59fc:	20800617 	ldw	r2,24(r4)
    5a00:	1080008c 	andi	r2,r2,2
    5a04:	10000226 	beq	r2,zero,5a10 <my_uart_irq+0x9c>
      (status & MY_UART_STATUS_CTS_MSK))
    5a08:	18c2000c 	andi	r3,r3,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & MY_UART_FC) ||
    5a0c:	18000f26 	beq	r3,zero,5a4c <my_uart_irq+0xd8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & MY_UART_BUF_MSK))
    5a10:	20800417 	ldw	r2,16(r4)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_MY_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    5a14:	20800417 	ldw	r2,16(r4)
    5a18:	20c00017 	ldw	r3,0(r4)
    5a1c:	2085883a 	add	r2,r4,r2
    5a20:	10801703 	ldbu	r2,92(r2)
    5a24:	18800135 	stwio	r2,4(r3)

      sp->tx_start = (++sp->tx_start) & MY_UART_BUF_MSK;
    5a28:	20800417 	ldw	r2,16(r4)
    5a2c:	10800044 	addi	r2,r2,1
    5a30:	20800415 	stw	r2,16(r4)
    5a34:	10800fcc 	andi	r2,r2,63
    5a38:	20800415 	stw	r2,16(r4)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= MY_UART_CONTROL_TRDY_MSK;
    5a3c:	20800117 	ldw	r2,4(r4)
    5a40:	10801014 	ori	r2,r2,64
    5a44:	20800115 	stw	r2,4(r4)
    5a48:	00000806 	br	5a6c <my_uart_irq+0xf8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_MY_UART_STATUS(sp->base); 
    5a4c:	20800017 	ldw	r2,0(r4)
    5a50:	10800237 	ldwio	r2,8(r2)

      if (!(status & MY_UART_STATUS_CTS_MSK))
    5a54:	1082000c 	andi	r2,r2,2048
    5a58:	1000041e 	bne	r2,zero,5a6c <my_uart_irq+0xf8>
      {
        sp->ctrl &= ~MY_UART_CONTROL_TRDY_MSK;
    5a5c:	20c00117 	ldw	r3,4(r4)
    5a60:	00bfefc4 	movi	r2,-65
    5a64:	1884703a 	and	r2,r3,r2
    5a68:	20800115 	stw	r2,4(r4)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    5a6c:	20c00417 	ldw	r3,16(r4)
    5a70:	20800517 	ldw	r2,20(r4)
    5a74:	1880041e 	bne	r3,r2,5a88 <my_uart_irq+0x114>
  {
    sp->ctrl &= ~(MY_UART_CONTROL_TRDY_MSK |
    5a78:	20c00117 	ldw	r3,4(r4)
    5a7c:	00beefc4 	movi	r2,-1089
    5a80:	1884703a 	and	r2,r3,r2
    5a84:	20800115 	stw	r2,4(r4)
                    MY_UART_CONTROL_DCTS_MSK);
  }

  IOWR_MY_UART_CONTROL(sp->base, sp->ctrl);
    5a88:	20800017 	ldw	r2,0(r4)
    5a8c:	20c00117 	ldw	r3,4(r4)
    5a90:	10c00335 	stwio	r3,12(r2)
    5a94:	f800283a 	ret

00005a98 <my_uart_init>:
static void my_uart_txirq(my_uart_state* sp,
  alt_u32 status);

void 
my_uart_init(my_uart_state* sp, alt_u32 irq)
{
    5a98:	defffe04 	addi	sp,sp,-8
    5a9c:	dfc00115 	stw	ra,4(sp)
    5aa0:	200f883a 	mov	r7,r4
  void* base = sp->base;
    5aa4:	20c00017 	ldw	r3,0(r4)

  if (!error)
  {
    /* enable interrupts at the device */

    sp->ctrl = MY_UART_CONTROL_RTS_MSK  |
    5aa8:	00832004 	movi	r2,3200
    5aac:	20800115 	stw	r2,4(r4)
                MY_UART_CONTROL_RRDY_MSK |
                MY_UART_CONTROL_DCTS_MSK;

    IOWR_MY_UART_CONTROL(base, sp->ctrl); 
    5ab0:	18800335 	stwio	r2,12(r3)
  
    /* register the interrupt handler */

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register (0, irq, my_uart_irq, sp, 0x0);
    5ab4:	d8000015 	stw	zero,0(sp)
    5ab8:	0009883a 	mov	r4,zero
    5abc:	01800034 	movhi	r6,0
    5ac0:	31965d04 	addi	r6,r6,22900
    5ac4:	000588c0 	call	588c <alt_ic_isr_register>
#else
    alt_irq_register (irq, sp, my_uart_irq);
#endif
  }
}
    5ac8:	dfc00117 	ldw	ra,4(sp)
    5acc:	dec00204 	addi	sp,sp,8
    5ad0:	f800283a 	ret

00005ad4 <my_uart_read>:
 */

int 
my_uart_read(my_uart_state* sp, char* ptr, int len,
  int flags)
{
    5ad4:	defffd04 	addi	sp,sp,-12
    5ad8:	dfc00215 	stw	ra,8(sp)
    5adc:	dc400115 	stw	r17,4(sp)
    5ae0:	dc000015 	stw	r16,0(sp)
    5ae4:	2021883a 	mov	r16,r4
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    5ae8:	39d0000c 	andi	r7,r7,16384
{
  alt_irq_context context;
  int             block;
  alt_u32         next;

  int count                = 0;
    5aec:	0023883a 	mov	r17,zero
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5af0:	023fff84 	movi	r8,-2
    5af4:	00000906 	br	5b1c <my_uart_read+0x48>
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    {
      count++;
    5af8:	8c400044 	addi	r17,r17,1
      *ptr++ = sp->rx_buf[sp->rx_start];
    5afc:	8085883a 	add	r2,r16,r2
    5b00:	10800703 	ldbu	r2,28(r2)
    5b04:	28800005 	stb	r2,0(r5)
      
      sp->rx_start = (++sp->rx_start) & MY_UART_BUF_MSK;
    5b08:	80800217 	ldw	r2,8(r16)
    5b0c:	10800044 	addi	r2,r2,1
    5b10:	10800fcc 	andi	r2,r2,63
    5b14:	80800215 	stw	r2,8(r16)
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    {
      count++;
      *ptr++ = sp->rx_buf[sp->rx_start];
    5b18:	29400044 	addi	r5,r5,1
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    5b1c:	8980030e 	bge	r17,r6,5b2c <my_uart_read+0x58>
    5b20:	80800217 	ldw	r2,8(r16)
    5b24:	80c00317 	ldw	r3,12(r16)
    5b28:	10fff31e 	bne	r2,r3,5af8 <my_uart_read+0x24>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    5b2c:	88001d1e 	bne	r17,zero,5ba4 <my_uart_read+0xd0>
    5b30:	80800317 	ldw	r2,12(r16)
    5b34:	80c00217 	ldw	r3,8(r16)
    5b38:	1880191e 	bne	r3,r2,5ba0 <my_uart_read+0xcc>
    {
      if (!block)
    5b3c:	38000b26 	beq	r7,zero,5b6c <my_uart_read+0x98>
    5b40:	00800034 	movhi	r2,0
    5b44:	109fb704 	addi	r2,r2,32476
    5b48:	10800017 	ldw	r2,0(r2)
    5b4c:	10000226 	beq	r2,zero,5b58 <my_uart_read+0x84>
    5b50:	103ee83a 	callr	r2
    5b54:	00000206 	br	5b60 <my_uart_read+0x8c>
    5b58:	00800034 	movhi	r2,0
    5b5c:	109fb804 	addi	r2,r2,32480
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    5b60:	00c002c4 	movi	r3,11
    5b64:	10c00015 	stw	r3,0(r2)
        break;
    5b68:	00000e06 	br	5ba4 <my_uart_read+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b6c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b70:	2204703a 	and	r2,r4,r8
    5b74:	1001703a 	wrctl	status,r2
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= MY_UART_CONTROL_RRDY_MSK;
    5b78:	80800117 	ldw	r2,4(r16)
    5b7c:	10802014 	ori	r2,r2,128
    5b80:	80800115 	stw	r2,4(r16)
       IOWR_MY_UART_CONTROL(sp->base, sp->ctrl);
    5b84:	80c00017 	ldw	r3,0(r16)
    5b88:	18800335 	stwio	r2,12(r3)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    5b8c:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    5b90:	1206703a 	and	r3,r2,r8
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5b94:	2080004c 	andi	r2,r4,1
    5b98:	10c4b03a 	or	r2,r2,r3
  
  NIOS2_WRITE_STATUS (status);
    5b9c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    5ba0:	303fde1e 	bne	r6,zero,5b1c <my_uart_read+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5ba4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ba8:	00bfff84 	movi	r2,-2
    5bac:	1888703a 	and	r4,r3,r2
    5bb0:	2001703a 	wrctl	status,r4
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= MY_UART_CONTROL_RRDY_MSK;
    5bb4:	81000117 	ldw	r4,4(r16)
    5bb8:	21002014 	ori	r4,r4,128
    5bbc:	81000115 	stw	r4,4(r16)
  IOWR_MY_UART_CONTROL(sp->base, sp->ctrl);
    5bc0:	81400017 	ldw	r5,0(r16)
    5bc4:	29000335 	stwio	r4,12(r5)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    5bc8:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    5bcc:	2084703a 	and	r2,r4,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5bd0:	18c0004c 	andi	r3,r3,1
    5bd4:	1884b03a 	or	r2,r3,r2
  
  NIOS2_WRITE_STATUS (status);
    5bd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */

  return count;
}
    5bdc:	8805883a 	mov	r2,r17
    5be0:	dfc00217 	ldw	ra,8(sp)
    5be4:	dc400117 	ldw	r17,4(sp)
    5be8:	dc000017 	ldw	r16,0(sp)
    5bec:	dec00304 	addi	sp,sp,12
    5bf0:	f800283a 	ret

00005bf4 <my_uart_write>:
 */

int
my_uart_write(my_uart_state* sp, const char* ptr, int len,
  int flags)
{
    5bf4:	defffc04 	addi	sp,sp,-16
    5bf8:	dfc00315 	stw	ra,12(sp)
    5bfc:	dc800215 	stw	r18,8(sp)
    5c00:	dc400115 	stw	r17,4(sp)
    5c04:	dc000015 	stw	r16,0(sp)
    5c08:	2021883a 	mov	r16,r4
    5c0c:	3025883a 	mov	r18,r6
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    5c10:	39d0000c 	andi	r7,r7,16384
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    5c14:	30002b26 	beq	r6,zero,5cc4 <my_uart_write+0xd0>
    5c18:	3023883a 	mov	r17,r6
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c1c:	027fff84 	movi	r9,-2
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & MY_UART_BUF_MSK;
    5c20:	80c00517 	ldw	r3,20(r16)
    5c24:	18c00044 	addi	r3,r3,1
    5c28:	18c00fcc 	andi	r3,r3,63

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    5c2c:	82000417 	ldw	r8,16(r16)
    5c30:	40c01b1e 	bne	r8,r3,5ca0 <my_uart_write+0xac>
    {
      if (no_block)
    5c34:	38000b26 	beq	r7,zero,5c64 <my_uart_write+0x70>
    5c38:	00800034 	movhi	r2,0
    5c3c:	109fb704 	addi	r2,r2,32476
    5c40:	10800017 	ldw	r2,0(r2)
    5c44:	10000226 	beq	r2,zero,5c50 <my_uart_write+0x5c>
    5c48:	103ee83a 	callr	r2
    5c4c:	00000206 	br	5c58 <my_uart_write+0x64>
    5c50:	00800034 	movhi	r2,0
    5c54:	109fb804 	addi	r2,r2,32480
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    5c58:	00c002c4 	movi	r3,11
    5c5c:	10c00015 	stw	r3,0(r2)
        break;
    5c60:	00001906 	br	5cc8 <my_uart_write+0xd4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c64:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c68:	3244703a 	and	r2,r6,r9
    5c6c:	1001703a 	wrctl	status,r2
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
        sp->ctrl |= (MY_UART_CONTROL_TRDY_MSK |
    5c70:	80800117 	ldw	r2,4(r16)
    5c74:	10811014 	ori	r2,r2,1088
    5c78:	80800115 	stw	r2,4(r16)
                        MY_UART_CONTROL_DCTS_MSK);
        IOWR_MY_UART_CONTROL(sp->base, sp->ctrl);
    5c7c:	81000017 	ldw	r4,0(r16)
    5c80:	20800335 	stwio	r2,12(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    5c84:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    5c88:	1248703a 	and	r4,r2,r9
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5c8c:	3080004c 	andi	r2,r6,1
    5c90:	1104b03a 	or	r2,r2,r4
  
  NIOS2_WRITE_STATUS (status);
    5c94:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         MY_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    5c98:	81000417 	ldw	r4,16(r16)
    5c9c:	413ffe26 	beq	r8,r4,5c98 <my_uart_write+0xa4>
      }
    }

    count--;
    5ca0:	8c7fffc4 	addi	r17,r17,-1

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    5ca4:	81000517 	ldw	r4,20(r16)
    5ca8:	8109883a 	add	r4,r16,r4
    5cac:	28800003 	ldbu	r2,0(r5)
    5cb0:	20801705 	stb	r2,92(r4)
    sp->tx_end = next;
    5cb4:	80c00515 	stw	r3,20(r16)
    5cb8:	29400044 	addi	r5,r5,1
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    5cbc:	883fd81e 	bne	r17,zero,5c20 <my_uart_write+0x2c>
    5cc0:	00000106 	br	5cc8 <my_uart_write+0xd4>
  int flags)
{
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    5cc4:	3023883a 	mov	r17,r6
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5cc8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ccc:	00bfff84 	movi	r2,-2
    5cd0:	1888703a 	and	r4,r3,r2
    5cd4:	2001703a 	wrctl	status,r4
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= MY_UART_CONTROL_TRDY_MSK |
    5cd8:	81000117 	ldw	r4,4(r16)
    5cdc:	21011014 	ori	r4,r4,1088
    5ce0:	81000115 	stw	r4,4(r16)
                 MY_UART_CONTROL_DCTS_MSK;
  IOWR_MY_UART_CONTROL(sp->base, sp->ctrl);
    5ce4:	81400017 	ldw	r5,0(r16)
    5ce8:	29000335 	stwio	r4,12(r5)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    5cec:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    5cf0:	2084703a 	and	r2,r4,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5cf4:	18c0004c 	andi	r3,r3,1
    5cf8:	1884b03a 	or	r2,r3,r2
  
  NIOS2_WRITE_STATUS (status);
    5cfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
}
    5d00:	9445c83a 	sub	r2,r18,r17
    5d04:	dfc00317 	ldw	ra,12(sp)
    5d08:	dc800217 	ldw	r18,8(sp)
    5d0c:	dc400117 	ldw	r17,4(sp)
    5d10:	dc000017 	ldw	r16,0(sp)
    5d14:	dec00404 	addi	sp,sp,16
    5d18:	f800283a 	ret

00005d1c <alt_alarm_start>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    5d1c:	00800034 	movhi	r2,0
    5d20:	109fbf04 	addi	r2,r2,32508
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    5d24:	10800017 	ldw	r2,0(r2)
    5d28:	10002226 	beq	r2,zero,5db4 <alt_alarm_start+0x98>
  {
    if (alarm)
    5d2c:	20002326 	beq	r4,zero,5dbc <alt_alarm_start+0xa0>
    {
      alarm->callback = callback;
    5d30:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    5d34:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d38:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d3c:	00ffff84 	movi	r3,-2
    5d40:	10c6703a 	and	r3,r2,r3
    5d44:	1801703a 	wrctl	status,r3
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    5d48:	00c00034 	movhi	r3,0
    5d4c:	18dfbe04 	addi	r3,r3,32504
    5d50:	18c00017 	ldw	r3,0(r3)
    5d54:	19800044 	addi	r6,r3,1
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    5d58:	314b883a 	add	r5,r6,r5
    5d5c:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    5d60:	28c0032e 	bgeu	r5,r3,5d70 <alt_alarm_start+0x54>
      {
        alarm->rollover = 1;
    5d64:	00c00044 	movi	r3,1
    5d68:	20c00405 	stb	r3,16(r4)
    5d6c:	00000106 	br	5d74 <alt_alarm_start+0x58>
      }
      else
      {
        alarm->rollover = 0;
    5d70:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5d74:	00c00034 	movhi	r3,0
    5d78:	18dfb004 	addi	r3,r3,32448
    5d7c:	20c00115 	stw	r3,4(r4)
  entry->next     = list->next;
    5d80:	19400017 	ldw	r5,0(r3)
    5d84:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
    5d88:	19400017 	ldw	r5,0(r3)
    5d8c:	29000115 	stw	r4,4(r5)
  list->next           = entry;
    5d90:	19000015 	stw	r4,0(r3)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    5d94:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    5d98:	00ffff84 	movi	r3,-2
    5d9c:	20c6703a 	and	r3,r4,r3
  status |= (context & NIOS2_STATUS_PIE_MSK);
    5da0:	1080004c 	andi	r2,r2,1
    5da4:	1884b03a 	or	r2,r3,r2
  
  NIOS2_WRITE_STATUS (status);
    5da8:	1001703a 	wrctl	status,r2
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    5dac:	0005883a 	mov	r2,zero
    5db0:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    5db4:	00bfde84 	movi	r2,-134
    5db8:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    5dbc:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    5dc0:	f800283a 	ret

00005dc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5dc4:	defffd04 	addi	sp,sp,-12
    5dc8:	dfc00215 	stw	ra,8(sp)
    5dcc:	dc400115 	stw	r17,4(sp)
    5dd0:	dc000015 	stw	r16,0(sp)
    5dd4:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5dd8:	20001916 	blt	r4,zero,5e40 <close+0x7c>
    5ddc:	21000324 	muli	r4,r4,12
    5de0:	00800034 	movhi	r2,0
    5de4:	109f9604 	addi	r2,r2,32344
    5de8:	2089883a 	add	r4,r4,r2
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5dec:	20800017 	ldw	r2,0(r4)
    5df0:	10800417 	ldw	r2,16(r2)
    5df4:	10001e26 	beq	r2,zero,5e70 <close+0xac>
    5df8:	103ee83a 	callr	r2
    5dfc:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5e00:	8009883a 	mov	r4,r16
    5e04:	00061bc0 	call	61bc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    5e08:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    5e0c:	88001b0e 	bge	r17,zero,5e7c <close+0xb8>
    5e10:	00800034 	movhi	r2,0
    5e14:	109fb704 	addi	r2,r2,32476
    5e18:	10800017 	ldw	r2,0(r2)
    5e1c:	10000226 	beq	r2,zero,5e28 <close+0x64>
    5e20:	103ee83a 	callr	r2
    5e24:	00000206 	br	5e30 <close+0x6c>
    5e28:	00800034 	movhi	r2,0
    5e2c:	109fb804 	addi	r2,r2,32480
    {
      ALT_ERRNO = -rval;
    5e30:	0463c83a 	sub	r17,zero,r17
    5e34:	14400015 	stw	r17,0(r2)
      return -1;
    5e38:	00bfffc4 	movi	r2,-1
    5e3c:	00000f06 	br	5e7c <close+0xb8>
    5e40:	00800034 	movhi	r2,0
    5e44:	109fb704 	addi	r2,r2,32476
    5e48:	10800017 	ldw	r2,0(r2)
    5e4c:	10000226 	beq	r2,zero,5e58 <close+0x94>
    5e50:	103ee83a 	callr	r2
    5e54:	00000206 	br	5e60 <close+0x9c>
    5e58:	00800034 	movhi	r2,0
    5e5c:	109fb804 	addi	r2,r2,32480
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5e60:	00c01444 	movi	r3,81
    5e64:	10c00015 	stw	r3,0(r2)
    return -1;
    5e68:	00bfffc4 	movi	r2,-1
    5e6c:	00000306 	br	5e7c <close+0xb8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5e70:	8009883a 	mov	r4,r16
    5e74:	00061bc0 	call	61bc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    5e78:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    5e7c:	dfc00217 	ldw	ra,8(sp)
    5e80:	dc400117 	ldw	r17,4(sp)
    5e84:	dc000017 	ldw	r16,0(sp)
    5e88:	dec00304 	addi	sp,sp,12
    5e8c:	f800283a 	ret

00005e90 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    5e90:	3005883a 	mov	r2,r6
    5e94:	f800283a 	ret

00005e98 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5e98:	20000226 	beq	r4,zero,5ea4 <alt_dev_llist_insert+0xc>
    5e9c:	20800217 	ldw	r2,8(r4)
    5ea0:	1000121e 	bne	r2,zero,5eec <alt_dev_llist_insert+0x54>
    5ea4:	00800034 	movhi	r2,0
    5ea8:	109fb704 	addi	r2,r2,32476
    5eac:	10800017 	ldw	r2,0(r2)
    5eb0:	10000426 	beq	r2,zero,5ec4 <alt_dev_llist_insert+0x2c>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5eb4:	deffff04 	addi	sp,sp,-4
    5eb8:	dfc00015 	stw	ra,0(sp)
    5ebc:	103ee83a 	callr	r2
    5ec0:	00000606 	br	5edc <alt_dev_llist_insert+0x44>
    5ec4:	00800034 	movhi	r2,0
    5ec8:	109fb804 	addi	r2,r2,32480
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    5ecc:	00c00584 	movi	r3,22
    5ed0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    5ed4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    5ed8:	f800283a 	ret
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    5edc:	00c00584 	movi	r3,22
    5ee0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    5ee4:	00bffa84 	movi	r2,-22
    5ee8:	00000806 	br	5f0c <alt_dev_llist_insert+0x74>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5eec:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    5ef0:	28800017 	ldw	r2,0(r5)
    5ef4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    5ef8:	28800017 	ldw	r2,0(r5)
    5efc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    5f00:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    5f04:	0005883a 	mov	r2,zero
    5f08:	f800283a 	ret
}
    5f0c:	dfc00017 	ldw	ra,0(sp)
    5f10:	dec00104 	addi	sp,sp,4
    5f14:	f800283a 	ret

00005f18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5f18:	defffe04 	addi	sp,sp,-8
    5f1c:	dfc00115 	stw	ra,4(sp)
    5f20:	dc000015 	stw	r16,0(sp)
    5f24:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    5f28:	2809883a 	mov	r4,r5
    5f2c:	300b883a 	mov	r5,r6
    5f30:	380d883a 	mov	r6,r7
    5f34:	00060140 	call	6014 <open>

  if (old >= 0)
    5f38:	10000c16 	blt	r2,zero,5f6c <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    5f3c:	10c00324 	muli	r3,r2,12
    5f40:	01000034 	movhi	r4,0
    5f44:	211f9604 	addi	r4,r4,32344
    5f48:	20c7883a 	add	r3,r4,r3
    5f4c:	19000017 	ldw	r4,0(r3)
    5f50:	81000015 	stw	r4,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    5f54:	19000117 	ldw	r4,4(r3)
    5f58:	81000115 	stw	r4,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5f5c:	18c00217 	ldw	r3,8(r3)
    5f60:	80c00215 	stw	r3,8(r16)

    alt_release_fd (old);
    5f64:	1009883a 	mov	r4,r2
    5f68:	00061bc0 	call	61bc <alt_release_fd>
  }
} 
    5f6c:	dfc00117 	ldw	ra,4(sp)
    5f70:	dc000017 	ldw	r16,0(sp)
    5f74:	dec00204 	addi	sp,sp,8
    5f78:	f800283a 	ret

00005f7c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5f7c:	defffa04 	addi	sp,sp,-24
    5f80:	dfc00515 	stw	ra,20(sp)
    5f84:	dd000415 	stw	r20,16(sp)
    5f88:	dcc00315 	stw	r19,12(sp)
    5f8c:	dc800215 	stw	r18,8(sp)
    5f90:	dc400115 	stw	r17,4(sp)
    5f94:	dc000015 	stw	r16,0(sp)
    5f98:	2005883a 	mov	r2,r4
    5f9c:	2829883a 	mov	r20,r5
    5fa0:	3027883a 	mov	r19,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5fa4:	04000034 	movhi	r16,0
    5fa8:	841f9904 	addi	r16,r16,32356
    5fac:	04800044 	movi	r18,1
    5fb0:	04407fc4 	movi	r17,511
    5fb4:	8009883a 	mov	r4,r16
    5fb8:	100b883a 	mov	r5,r2
    5fbc:	900d883a 	mov	r6,r18
    5fc0:	880f883a 	mov	r7,r17
    5fc4:	0005f180 	call	5f18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5fc8:	843ffd04 	addi	r16,r16,-12
    5fcc:	8009883a 	mov	r4,r16
    5fd0:	a00b883a 	mov	r5,r20
    5fd4:	000d883a 	mov	r6,zero
    5fd8:	880f883a 	mov	r7,r17
    5fdc:	0005f180 	call	5f18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5fe0:	81000604 	addi	r4,r16,24
    5fe4:	980b883a 	mov	r5,r19
    5fe8:	900d883a 	mov	r6,r18
    5fec:	880f883a 	mov	r7,r17
    5ff0:	0005f180 	call	5f18 <alt_open_fd>
}  
    5ff4:	dfc00517 	ldw	ra,20(sp)
    5ff8:	dd000417 	ldw	r20,16(sp)
    5ffc:	dcc00317 	ldw	r19,12(sp)
    6000:	dc800217 	ldw	r18,8(sp)
    6004:	dc400117 	ldw	r17,4(sp)
    6008:	dc000017 	ldw	r16,0(sp)
    600c:	dec00604 	addi	sp,sp,24
    6010:	f800283a 	ret

00006014 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6014:	defffa04 	addi	sp,sp,-24
    6018:	dfc00515 	stw	ra,20(sp)
    601c:	dd000415 	stw	r20,16(sp)
    6020:	dcc00315 	stw	r19,12(sp)
    6024:	dc800215 	stw	r18,8(sp)
    6028:	dc400115 	stw	r17,4(sp)
    602c:	dc000015 	stw	r16,0(sp)
    6030:	2025883a 	mov	r18,r4
    6034:	2827883a 	mov	r19,r5
    6038:	3029883a 	mov	r20,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    603c:	01400034 	movhi	r5,0
    6040:	295fb304 	addi	r5,r5,32460
    6044:	00061e00 	call	61e0 <alt_find_dev>
    6048:	1021883a 	mov	r16,r2
    604c:	1000401e 	bne	r2,zero,6150 <open+0x13c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    6050:	9009883a 	mov	r4,r18
    6054:	000625c0 	call	625c <alt_find_file>
    6058:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    605c:	10004a1e 	bne	r2,zero,6188 <open+0x174>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6060:	043ffb44 	movi	r16,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6064:	047fffc4 	movi	r17,-1
    6068:	00001406 	br	60bc <open+0xa8>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    606c:	18800017 	ldw	r2,0(r3)
    6070:	1180031e 	bne	r2,r6,6080 <open+0x6c>
    6074:	48800017 	ldw	r2,0(r9)
    6078:	1000010e 	bge	r2,zero,6080 <open+0x6c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    607c:	20c00e1e 	bne	r4,r3,60b8 <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6080:	42000044 	addi	r8,r8,1
    6084:	18c00304 	addi	r3,r3,12
    6088:	4a400304 	addi	r9,r9,12
    608c:	3a3ff72e 	bgeu	r7,r8,606c <open+0x58>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6090:	80800317 	ldw	r2,12(r16)
    6094:	10001726 	beq	r2,zero,60f4 <open+0xe0>
    6098:	900b883a 	mov	r5,r18
    609c:	980d883a 	mov	r6,r19
    60a0:	a00f883a 	mov	r7,r20
    60a4:	103ee83a 	callr	r2
    60a8:	1021883a 	mov	r16,r2
    60ac:	8805883a 	mov	r2,r17
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    60b0:	80003a0e 	bge	r16,zero,619c <open+0x188>
    60b4:	00000106 	br	60bc <open+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    60b8:	043ffcc4 	movi	r16,-13

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    60bc:	8809883a 	mov	r4,r17
    60c0:	00061bc0 	call	61bc <alt_release_fd>
    60c4:	00800034 	movhi	r2,0
    60c8:	109fb704 	addi	r2,r2,32476
    60cc:	10800017 	ldw	r2,0(r2)
    60d0:	10000226 	beq	r2,zero,60dc <open+0xc8>
    60d4:	103ee83a 	callr	r2
    60d8:	00000206 	br	60e4 <open+0xd0>
    60dc:	00800034 	movhi	r2,0
    60e0:	109fb804 	addi	r2,r2,32480
    ALT_ERRNO = -status;
    60e4:	0421c83a 	sub	r16,zero,r16
    60e8:	14000015 	stw	r16,0(r2)
    return -1;
    60ec:	00bfffc4 	movi	r2,-1
    60f0:	00002a06 	br	619c <open+0x188>
    60f4:	8805883a 	mov	r2,r17
    60f8:	00002806 	br	619c <open+0x188>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    60fc:	8821883a 	mov	r16,r17
    6100:	003fee06 	br	60bc <open+0xa8>
    6104:	8821883a 	mov	r16,r17
    6108:	003fec06 	br	60bc <open+0xa8>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    610c:	89000324 	muli	r4,r17,12
    6110:	02400034 	movhi	r9,0
    6114:	4a5f9604 	addi	r9,r9,32344
    6118:	2249883a 	add	r4,r4,r9
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    611c:	00900034 	movhi	r2,16384
    6120:	10bfffc4 	addi	r2,r2,-1
    6124:	9884703a 	and	r2,r19,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6128:	10900034 	orhi	r2,r2,16384
    612c:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6130:	00800034 	movhi	r2,0
    6134:	109fb204 	addi	r2,r2,32456
    6138:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    613c:	21800017 	ldw	r6,0(r4)
    6140:	4807883a 	mov	r3,r9
    6144:	4a400204 	addi	r9,r9,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6148:	0011883a 	mov	r8,zero
    614c:	003fc706 	br	606c <open+0x58>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    6150:	1009883a 	mov	r4,r2
    6154:	00063280 	call	6328 <alt_get_fd>
    6158:	1023883a 	mov	r17,r2
    615c:	103feb0e 	bge	r2,zero,610c <open+0xf8>
    6160:	003fe606 	br	60fc <open+0xe8>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    6164:	89000324 	muli	r4,r17,12
    6168:	00800034 	movhi	r2,0
    616c:	109f9604 	addi	r2,r2,32344
    6170:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6174:	00900034 	movhi	r2,16384
    6178:	10bfffc4 	addi	r2,r2,-1
    617c:	9884703a 	and	r2,r19,r2
    6180:	20800215 	stw	r2,8(r4)
    6184:	003fc206 	br	6090 <open+0x7c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    6188:	1009883a 	mov	r4,r2
    618c:	00063280 	call	6328 <alt_get_fd>
    6190:	1023883a 	mov	r17,r2
    6194:	103ff30e 	bge	r2,zero,6164 <open+0x150>
    6198:	003fda06 	br	6104 <open+0xf0>
  }
  
  /* return the reference upon success */

  return index;
}
    619c:	dfc00517 	ldw	ra,20(sp)
    61a0:	dd000417 	ldw	r20,16(sp)
    61a4:	dcc00317 	ldw	r19,12(sp)
    61a8:	dc800217 	ldw	r18,8(sp)
    61ac:	dc400117 	ldw	r17,4(sp)
    61b0:	dc000017 	ldw	r16,0(sp)
    61b4:	dec00604 	addi	sp,sp,24
    61b8:	f800283a 	ret

000061bc <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    61bc:	00800084 	movi	r2,2
    61c0:	1100060e 	bge	r2,r4,61dc <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    61c4:	21000324 	muli	r4,r4,12
    61c8:	00800034 	movhi	r2,0
    61cc:	109f9604 	addi	r2,r2,32344
    61d0:	1109883a 	add	r4,r2,r4
    61d4:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    61d8:	20000015 	stw	zero,0(r4)
    61dc:	f800283a 	ret

000061e0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    61e0:	defffb04 	addi	sp,sp,-20
    61e4:	dfc00415 	stw	ra,16(sp)
    61e8:	dcc00315 	stw	r19,12(sp)
    61ec:	dc800215 	stw	r18,8(sp)
    61f0:	dc400115 	stw	r17,4(sp)
    61f4:	dc000015 	stw	r16,0(sp)
    61f8:	2027883a 	mov	r19,r4
    61fc:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    6200:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    6204:	00041e00 	call	41e0 <strlen>
    6208:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    620c:	8c000926 	beq	r17,r16,6234 <alt_find_dev+0x54>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    6210:	81000217 	ldw	r4,8(r16)
    6214:	980b883a 	mov	r5,r19
    6218:	900d883a 	mov	r6,r18
    621c:	00063e00 	call	63e0 <memcmp>
    6220:	10000626 	beq	r2,zero,623c <alt_find_dev+0x5c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    6224:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6228:	8c3ff91e 	bne	r17,r16,6210 <alt_find_dev+0x30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    622c:	0005883a 	mov	r2,zero
    6230:	00000306 	br	6240 <alt_find_dev+0x60>
    6234:	0005883a 	mov	r2,zero
    6238:	00000106 	br	6240 <alt_find_dev+0x60>
    623c:	8005883a 	mov	r2,r16
}
    6240:	dfc00417 	ldw	ra,16(sp)
    6244:	dcc00317 	ldw	r19,12(sp)
    6248:	dc800217 	ldw	r18,8(sp)
    624c:	dc400117 	ldw	r17,4(sp)
    6250:	dc000017 	ldw	r16,0(sp)
    6254:	dec00504 	addi	sp,sp,20
    6258:	f800283a 	ret

0000625c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    625c:	defffa04 	addi	sp,sp,-24
    6260:	dfc00515 	stw	ra,20(sp)
    6264:	dd000415 	stw	r20,16(sp)
    6268:	dcc00315 	stw	r19,12(sp)
    626c:	dc800215 	stw	r18,8(sp)
    6270:	dc400115 	stw	r17,4(sp)
    6274:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6278:	00800034 	movhi	r2,0
    627c:	109fb504 	addi	r2,r2,32468
    6280:	14000017 	ldw	r16,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6284:	80801d26 	beq	r16,r2,62fc <alt_find_file+0xa0>
    6288:	2027883a 	mov	r19,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    628c:	04800bc4 	movi	r18,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6290:	00800034 	movhi	r2,0
    6294:	109fb504 	addi	r2,r2,32468
    6298:	1029883a 	mov	r20,r2
  {
    len = strlen(next->name);
    629c:	84400217 	ldw	r17,8(r16)
    62a0:	8809883a 	mov	r4,r17
    62a4:	00041e00 	call	41e0 <strlen>
    62a8:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    62ac:	8889883a 	add	r4,r17,r2
    62b0:	213fffc7 	ldb	r4,-1(r4)
    62b4:	2480011e 	bne	r4,r18,62bc <alt_find_file+0x60>
    {
      len -= 1;
    62b8:	10ffffc4 	addi	r3,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    62bc:	180d883a 	mov	r6,r3
    62c0:	98c7883a 	add	r3,r19,r3
    62c4:	18800003 	ldbu	r2,0(r3)
    62c8:	10c03fcc 	andi	r3,r2,255
    62cc:	18c0201c 	xori	r3,r3,128
    62d0:	18ffe004 	addi	r3,r3,-128
    62d4:	1c800126 	beq	r3,r18,62dc <alt_find_file+0x80>
    62d8:	1800041e 	bne	r3,zero,62ec <alt_find_file+0x90>
        !memcmp (next->name, name, len))
    62dc:	8809883a 	mov	r4,r17
    62e0:	980b883a 	mov	r5,r19
    62e4:	00063e00 	call	63e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    62e8:	10000626 	beq	r2,zero,6304 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    62ec:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    62f0:	853fea1e 	bne	r16,r20,629c <alt_find_file+0x40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    62f4:	0005883a 	mov	r2,zero
    62f8:	00000306 	br	6308 <alt_find_file+0xac>
    62fc:	0005883a 	mov	r2,zero
    6300:	00000106 	br	6308 <alt_find_file+0xac>
    6304:	8005883a 	mov	r2,r16
}
    6308:	dfc00517 	ldw	ra,20(sp)
    630c:	dd000417 	ldw	r20,16(sp)
    6310:	dcc00317 	ldw	r19,12(sp)
    6314:	dc800217 	ldw	r18,8(sp)
    6318:	dc400117 	ldw	r17,4(sp)
    631c:	dc000017 	ldw	r16,0(sp)
    6320:	dec00604 	addi	sp,sp,24
    6324:	f800283a 	ret

00006328 <alt_get_fd>:
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    6328:	00800034 	movhi	r2,0
    632c:	109f9604 	addi	r2,r2,32344
    6330:	10800017 	ldw	r2,0(r2)
    6334:	10001226 	beq	r2,zero,6380 <alt_get_fd+0x58>
    6338:	00800034 	movhi	r2,0
    633c:	109f9604 	addi	r2,r2,32344
    6340:	10800317 	ldw	r2,12(r2)
    6344:	10000a26 	beq	r2,zero,6370 <alt_get_fd+0x48>
    6348:	00800034 	movhi	r2,0
    634c:	109f9604 	addi	r2,r2,32344
    6350:	10800617 	ldw	r2,24(r2)
    6354:	10000826 	beq	r2,zero,6378 <alt_get_fd+0x50>
    6358:	00800034 	movhi	r2,0
    635c:	109f9604 	addi	r2,r2,32344
    6360:	10800917 	ldw	r2,36(r2)
    6364:	1000141e 	bne	r2,zero,63b8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6368:	008000c4 	movi	r2,3
    636c:	00000506 	br	6384 <alt_get_fd+0x5c>
    6370:	00800044 	movi	r2,1
    6374:	00000306 	br	6384 <alt_get_fd+0x5c>
    6378:	00800084 	movi	r2,2
    637c:	00000106 	br	6384 <alt_get_fd+0x5c>
    6380:	0005883a 	mov	r2,zero
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    6384:	10c00324 	muli	r3,r2,12
    6388:	01400034 	movhi	r5,0
    638c:	295f9604 	addi	r5,r5,32344
    6390:	28c7883a 	add	r3,r5,r3
    6394:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
    6398:	00c00034 	movhi	r3,0
    639c:	18dfb204 	addi	r3,r3,32456
    63a0:	18c00017 	ldw	r3,0(r3)
    63a4:	1880050e 	bge	r3,r2,63bc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    63a8:	00c00034 	movhi	r3,0
    63ac:	18dfb204 	addi	r3,r3,32456
    63b0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
      goto alt_get_fd_exit;
    63b4:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    63b8:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    63bc:	f800283a 	ret

000063c0 <exit>:
    63c0:	defffe04 	addi	sp,sp,-8
    63c4:	000b883a 	mov	r5,zero
    63c8:	dc000015 	stw	r16,0(sp)
    63cc:	dfc00115 	stw	ra,4(sp)
    63d0:	2021883a 	mov	r16,r4
    63d4:	00064840 	call	6484 <__call_exitprocs>
    63d8:	8009883a 	mov	r4,r16
    63dc:	000674c0 	call	674c <_exit>

000063e0 <memcmp>:
    63e0:	218d883a 	add	r6,r4,r6
    63e4:	21800826 	beq	r4,r6,6408 <memcmp+0x28>
    63e8:	20800003 	ldbu	r2,0(r4)
    63ec:	28c00003 	ldbu	r3,0(r5)
    63f0:	10c00226 	beq	r2,r3,63fc <memcmp+0x1c>
    63f4:	10c5c83a 	sub	r2,r2,r3
    63f8:	f800283a 	ret
    63fc:	21000044 	addi	r4,r4,1
    6400:	29400044 	addi	r5,r5,1
    6404:	003ff706 	br	63e4 <memcmp+0x4>
    6408:	0005883a 	mov	r2,zero
    640c:	f800283a 	ret

00006410 <memcpy>:
    6410:	2005883a 	mov	r2,r4
    6414:	0007883a 	mov	r3,zero
    6418:	19800626 	beq	r3,r6,6434 <memcpy+0x24>
    641c:	28c9883a 	add	r4,r5,r3
    6420:	21c00003 	ldbu	r7,0(r4)
    6424:	10c9883a 	add	r4,r2,r3
    6428:	18c00044 	addi	r3,r3,1
    642c:	21c00005 	stb	r7,0(r4)
    6430:	003ff906 	br	6418 <memcpy+0x8>
    6434:	f800283a 	ret

00006438 <strncpy>:
    6438:	2005883a 	mov	r2,r4
    643c:	2007883a 	mov	r3,r4
    6440:	1809883a 	mov	r4,r3
    6444:	30000926 	beq	r6,zero,646c <strncpy+0x34>
    6448:	29c00003 	ldbu	r7,0(r5)
    644c:	31bfffc4 	addi	r6,r6,-1
    6450:	18c00044 	addi	r3,r3,1
    6454:	21c00005 	stb	r7,0(r4)
    6458:	39c03fcc 	andi	r7,r7,255
    645c:	39c0201c 	xori	r7,r7,128
    6460:	39ffe004 	addi	r7,r7,-128
    6464:	29400044 	addi	r5,r5,1
    6468:	383ff51e 	bne	r7,zero,6440 <strncpy+0x8>
    646c:	198d883a 	add	r6,r3,r6
    6470:	19800326 	beq	r3,r6,6480 <strncpy+0x48>
    6474:	18000005 	stb	zero,0(r3)
    6478:	18c00044 	addi	r3,r3,1
    647c:	003ffc06 	br	6470 <strncpy+0x38>
    6480:	f800283a 	ret

00006484 <__call_exitprocs>:
    6484:	00800034 	movhi	r2,0
    6488:	109fac04 	addi	r2,r2,32432
    648c:	10800017 	ldw	r2,0(r2)
    6490:	defff304 	addi	sp,sp,-52
    6494:	ddc00a15 	stw	r23,40(sp)
    6498:	d8800015 	stw	r2,0(sp)
    649c:	05c00034 	movhi	r23,0
    64a0:	10800c04 	addi	r2,r2,48
    64a4:	dc800515 	stw	r18,20(sp)
    64a8:	dfc00c15 	stw	ra,48(sp)
    64ac:	df000b15 	stw	fp,44(sp)
    64b0:	dd800915 	stw	r22,36(sp)
    64b4:	dd400815 	stw	r21,32(sp)
    64b8:	dd000715 	stw	r20,28(sp)
    64bc:	dcc00615 	stw	r19,24(sp)
    64c0:	dc400415 	stw	r17,16(sp)
    64c4:	dc000315 	stw	r16,12(sp)
    64c8:	d9000115 	stw	r4,4(sp)
    64cc:	2825883a 	mov	r18,r5
    64d0:	d8800215 	stw	r2,8(sp)
    64d4:	bdc00004 	addi	r23,r23,0
    64d8:	d8800017 	ldw	r2,0(sp)
    64dc:	dc400217 	ldw	r17,8(sp)
    64e0:	14c00c17 	ldw	r19,48(r2)
    64e4:	98004226 	beq	r19,zero,65f0 <__call_exitprocs+0x16c>
    64e8:	9c000117 	ldw	r16,4(r19)
    64ec:	00900034 	movhi	r2,16384
    64f0:	10bfffc4 	addi	r2,r2,-1
    64f4:	9d002217 	ldw	r20,136(r19)
    64f8:	857fffc4 	addi	r21,r16,-1
    64fc:	80a1883a 	add	r16,r16,r2
    6500:	8421883a 	add	r16,r16,r16
    6504:	8421883a 	add	r16,r16,r16
    6508:	a42d883a 	add	r22,r20,r16
    650c:	84000204 	addi	r16,r16,8
    6510:	9c21883a 	add	r16,r19,r16
    6514:	a8002616 	blt	r21,zero,65b0 <__call_exitprocs+0x12c>
    6518:	90000326 	beq	r18,zero,6528 <__call_exitprocs+0xa4>
    651c:	a0002026 	beq	r20,zero,65a0 <__call_exitprocs+0x11c>
    6520:	b1002017 	ldw	r4,128(r22)
    6524:	24801e1e 	bne	r4,r18,65a0 <__call_exitprocs+0x11c>
    6528:	99000117 	ldw	r4,4(r19)
    652c:	82000017 	ldw	r8,0(r16)
    6530:	213fffc4 	addi	r4,r4,-1
    6534:	a900021e 	bne	r21,r4,6540 <__call_exitprocs+0xbc>
    6538:	9d400115 	stw	r21,4(r19)
    653c:	00000106 	br	6544 <__call_exitprocs+0xc0>
    6540:	80000015 	stw	zero,0(r16)
    6544:	40001626 	beq	r8,zero,65a0 <__call_exitprocs+0x11c>
    6548:	9f000117 	ldw	fp,4(r19)
    654c:	a0000526 	beq	r20,zero,6564 <__call_exitprocs+0xe0>
    6550:	00800044 	movi	r2,1
    6554:	1552983a 	sll	r9,r2,r21
    6558:	a1404017 	ldw	r5,256(r20)
    655c:	494a703a 	and	r5,r9,r5
    6560:	2800021e 	bne	r5,zero,656c <__call_exitprocs+0xe8>
    6564:	403ee83a 	callr	r8
    6568:	00000906 	br	6590 <__call_exitprocs+0x10c>
    656c:	a1004117 	ldw	r4,260(r20)
    6570:	4908703a 	and	r4,r9,r4
    6574:	2000041e 	bne	r4,zero,6588 <__call_exitprocs+0x104>
    6578:	d9000117 	ldw	r4,4(sp)
    657c:	b1400017 	ldw	r5,0(r22)
    6580:	403ee83a 	callr	r8
    6584:	00000206 	br	6590 <__call_exitprocs+0x10c>
    6588:	b1000017 	ldw	r4,0(r22)
    658c:	403ee83a 	callr	r8
    6590:	99000117 	ldw	r4,4(r19)
    6594:	e13fd01e 	bne	fp,r4,64d8 <__call_exitprocs+0x54>
    6598:	89000017 	ldw	r4,0(r17)
    659c:	24ffce1e 	bne	r4,r19,64d8 <__call_exitprocs+0x54>
    65a0:	ad7fffc4 	addi	r21,r21,-1
    65a4:	b5bfff04 	addi	r22,r22,-4
    65a8:	843fff04 	addi	r16,r16,-4
    65ac:	003fd906 	br	6514 <__call_exitprocs+0x90>
    65b0:	b8000f26 	beq	r23,zero,65f0 <__call_exitprocs+0x16c>
    65b4:	99000117 	ldw	r4,4(r19)
    65b8:	20000a1e 	bne	r4,zero,65e4 <__call_exitprocs+0x160>
    65bc:	99000017 	ldw	r4,0(r19)
    65c0:	20000826 	beq	r4,zero,65e4 <__call_exitprocs+0x160>
    65c4:	89000015 	stw	r4,0(r17)
    65c8:	a0000226 	beq	r20,zero,65d4 <__call_exitprocs+0x150>
    65cc:	a009883a 	mov	r4,r20
    65d0:	00000000 	call	0 <__alt_mem_onchip_memory-0x4000>
    65d4:	9809883a 	mov	r4,r19
    65d8:	00000000 	call	0 <__alt_mem_onchip_memory-0x4000>
    65dc:	8cc00017 	ldw	r19,0(r17)
    65e0:	003fc006 	br	64e4 <__call_exitprocs+0x60>
    65e4:	9823883a 	mov	r17,r19
    65e8:	9cc00017 	ldw	r19,0(r19)
    65ec:	003fbd06 	br	64e4 <__call_exitprocs+0x60>
    65f0:	dfc00c17 	ldw	ra,48(sp)
    65f4:	df000b17 	ldw	fp,44(sp)
    65f8:	ddc00a17 	ldw	r23,40(sp)
    65fc:	dd800917 	ldw	r22,36(sp)
    6600:	dd400817 	ldw	r21,32(sp)
    6604:	dd000717 	ldw	r20,28(sp)
    6608:	dcc00617 	ldw	r19,24(sp)
    660c:	dc800517 	ldw	r18,20(sp)
    6610:	dc400417 	ldw	r17,16(sp)
    6614:	dc000317 	ldw	r16,12(sp)
    6618:	dec00d04 	addi	sp,sp,52
    661c:	f800283a 	ret

00006620 <udivmodsi4>:
    6620:	2900182e 	bgeu	r5,r4,6684 <udivmodsi4+0x64>
    6624:	28001716 	blt	r5,zero,6684 <udivmodsi4+0x64>
    6628:	00800804 	movi	r2,32
    662c:	00c00044 	movi	r3,1
    6630:	00000206 	br	663c <udivmodsi4+0x1c>
    6634:	10001126 	beq	r2,zero,667c <udivmodsi4+0x5c>
    6638:	28000516 	blt	r5,zero,6650 <udivmodsi4+0x30>
    663c:	294b883a 	add	r5,r5,r5
    6640:	10bfffc4 	addi	r2,r2,-1
    6644:	18c7883a 	add	r3,r3,r3
    6648:	293ffa36 	bltu	r5,r4,6634 <udivmodsi4+0x14>
    664c:	18000b26 	beq	r3,zero,667c <udivmodsi4+0x5c>
    6650:	0005883a 	mov	r2,zero
    6654:	21400236 	bltu	r4,r5,6660 <udivmodsi4+0x40>
    6658:	2149c83a 	sub	r4,r4,r5
    665c:	10c4b03a 	or	r2,r2,r3
    6660:	1806d07a 	srli	r3,r3,1
    6664:	280ad07a 	srli	r5,r5,1
    6668:	183ffa1e 	bne	r3,zero,6654 <udivmodsi4+0x34>
    666c:	3000011e 	bne	r6,zero,6674 <udivmodsi4+0x54>
    6670:	f800283a 	ret
    6674:	2005883a 	mov	r2,r4
    6678:	f800283a 	ret
    667c:	0005883a 	mov	r2,zero
    6680:	003ffa06 	br	666c <udivmodsi4+0x4c>
    6684:	00c00044 	movi	r3,1
    6688:	003ff106 	br	6650 <udivmodsi4+0x30>

0000668c <__divsi3>:
    668c:	defffe04 	addi	sp,sp,-8
    6690:	dfc00115 	stw	ra,4(sp)
    6694:	dc000015 	stw	r16,0(sp)
    6698:	20000b16 	blt	r4,zero,66c8 <__divsi3+0x3c>
    669c:	0021883a 	mov	r16,zero
    66a0:	28000c16 	blt	r5,zero,66d4 <__divsi3+0x48>
    66a4:	000d883a 	mov	r6,zero
    66a8:	00066200 	call	6620 <udivmodsi4>
    66ac:	0407c83a 	sub	r3,zero,r16
    66b0:	1884f03a 	xor	r2,r3,r2
    66b4:	1405883a 	add	r2,r2,r16
    66b8:	dfc00117 	ldw	ra,4(sp)
    66bc:	dc000017 	ldw	r16,0(sp)
    66c0:	dec00204 	addi	sp,sp,8
    66c4:	f800283a 	ret
    66c8:	0109c83a 	sub	r4,zero,r4
    66cc:	04000044 	movi	r16,1
    66d0:	283ff40e 	bge	r5,zero,66a4 <__divsi3+0x18>
    66d4:	014bc83a 	sub	r5,zero,r5
    66d8:	8400005c 	xori	r16,r16,1
    66dc:	003ff106 	br	66a4 <__divsi3+0x18>

000066e0 <__modsi3>:
    66e0:	defffd04 	addi	sp,sp,-12
    66e4:	dfc00215 	stw	ra,8(sp)
    66e8:	dc400115 	stw	r17,4(sp)
    66ec:	dc000015 	stw	r16,0(sp)
    66f0:	20000c16 	blt	r4,zero,6724 <__modsi3+0x44>
    66f4:	0023883a 	mov	r17,zero
    66f8:	0021883a 	mov	r16,zero
    66fc:	28000d16 	blt	r5,zero,6734 <__modsi3+0x54>
    6700:	01800044 	movi	r6,1
    6704:	00066200 	call	6620 <udivmodsi4>
    6708:	1404f03a 	xor	r2,r2,r16
    670c:	8885883a 	add	r2,r17,r2
    6710:	dfc00217 	ldw	ra,8(sp)
    6714:	dc400117 	ldw	r17,4(sp)
    6718:	dc000017 	ldw	r16,0(sp)
    671c:	dec00304 	addi	sp,sp,12
    6720:	f800283a 	ret
    6724:	0109c83a 	sub	r4,zero,r4
    6728:	04400044 	movi	r17,1
    672c:	043fffc4 	movi	r16,-1
    6730:	283ff30e 	bge	r5,zero,6700 <__modsi3+0x20>
    6734:	014bc83a 	sub	r5,zero,r5
    6738:	003ff106 	br	6700 <__modsi3+0x20>

0000673c <__udivsi3>:
    673c:	000d883a 	mov	r6,zero
    6740:	00066201 	jmpi	6620 <udivmodsi4>

00006744 <__umodsi3>:
    6744:	01800044 	movi	r6,1
    6748:	00066201 	jmpi	6620 <udivmodsi4>

0000674c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    674c:	defffe04 	addi	sp,sp,-8
    6750:	dfc00115 	stw	ra,4(sp)
    6754:	dc000015 	stw	r16,0(sp)
    6758:	2021883a 	mov	r16,r4
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
    675c:	00800034 	movhi	r2,0
    6760:	109afe04 	addi	r2,r2,27640
    6764:	10c00017 	ldw	r3,0(r2)
    6768:	00800044 	movi	r2,1
    676c:	1880031e 	bne	r3,r2,677c <_exit+0x30>
    6770:	01000034 	movhi	r4,0
    6774:	211a9304 	addi	r4,r4,27212
    6778:	00049040 	call	4904 <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
    677c:	00800034 	movhi	r2,0
    6780:	109afe04 	addi	r2,r2,27640
    6784:	10c00017 	ldw	r3,0(r2)
    6788:	00800044 	movi	r2,1
    678c:	1880041e 	bne	r3,r2,67a0 <_exit+0x54>
    6790:	01000034 	movhi	r4,0
    6794:	211a9e04 	addi	r4,r4,27256
    6798:	800b883a 	mov	r5,r16
    679c:	00049040 	call	4904 <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
    67a0:	00800034 	movhi	r2,0
    67a4:	109afe04 	addi	r2,r2,27640
    67a8:	10c00017 	ldw	r3,0(r2)
    67ac:	00800044 	movi	r2,1
    67b0:	1880031e 	bne	r3,r2,67c0 <_exit+0x74>
    67b4:	01000034 	movhi	r4,0
    67b8:	211aa904 	addi	r4,r4,27300
    67bc:	00049040 	call	4904 <alt_log_printf_proc>
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
    67c0:	00800034 	movhi	r2,0
    67c4:	109afe04 	addi	r2,r2,27640
    67c8:	10c00017 	ldw	r3,0(r2)
    67cc:	00800044 	movi	r2,1
    67d0:	1880031e 	bne	r3,r2,67e0 <_exit+0x94>
    67d4:	01000034 	movhi	r4,0
    67d8:	211ab304 	addi	r4,r4,27340
    67dc:	00049040 	call	4904 <alt_log_printf_proc>
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    67e0:	80000226 	beq	r16,zero,67ec <_exit+0xa0>
    ALT_SIM_FAIL();
    67e4:	002af070 	cmpltui	zero,zero,43969
    67e8:	00000106 	br	67f0 <_exit+0xa4>
  } else {
    ALT_SIM_PASS();
    67ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
    67f0:	00800034 	movhi	r2,0
    67f4:	109afe04 	addi	r2,r2,27640
    67f8:	10c00017 	ldw	r3,0(r2)
    67fc:	00800044 	movi	r2,1
    6800:	1880031e 	bne	r3,r2,6810 <_exit+0xc4>
    6804:	01000034 	movhi	r4,0
    6808:	211abd04 	addi	r4,r4,27380
    680c:	00049040 	call	4904 <alt_log_printf_proc>
  while (1);
    6810:	003fff06 	br	6810 <_exit+0xc4>
