
Creational design patterns: These design patterns are all about class 
instantiation. This pattern can be further divided into class-creation
patterns and object-creational patterns. While class-creation patterns 
use inheritance effectively in the instantiation process, object-
creation patterns use delegation effectively to get the job done.

01    Abstract Factory: Creates an instance of several families of classes
02    Builder: Separates object construction from its representation
03    Factory Method: Creates an instance of several derived classes
04    Object Pool: Avoid expensive acquisition and release of resources 
        by recycling objects that are no longer in use
05    Prototype: A fully initialized instance to be copied or cloned
06    Singleton: A class of which only a single instance can exist

Structural design patterns: These design patterns are all about Class 
and Object composition.  Structural class-creation patterns use 
inheritance to compose interfaces. Structural object-patterns define 
ways to compose objects to obtain new functionality.

07    Adapter: Match interfaces of different classes
08    Bridge: Separates an objectâ€™s interface from its implementation
09    Composite: A tree structure of simple and composite objects
10    Decorator: Add responsibilities to objects dynamically
11    Facade: A single class that represents an entire subsystem
12    Flyweight: A fine-grained instance used for efficient sharing
13    Private Class Data: Restricts accessor/mutator access
14    Proxy: An object representing another object

Behavioral design patterns: These design patterns are all about Class's 
objects communication.  Behavioral patterns are those patterns that are 
most specifically concerned with communication between objects.

15    Chain of responsibility: A way of passing a request between a 
        chain of objects
16    Command: Encapsulate a command request as an object
17    Interpreter: A way to include language elements in a program
18    Iterator: Sequentially access the elements of a collection
19    Mediator: Defines simplified communication between classes
20    Memento: Capture and restore an object's internal state
21    Null Object: Designed to act as a default value of an object
22    Observer: A way of notifying change to a number of classes
23    State: Alter an object's behavior when its state changes
24    Strategy: Encapsulates an algorithm inside a class
25    Template method: Defer the exact steps of an algorithm to a subclass
26    Visitor: Defines a new operation to a class without change


