;==========================================================
;Header
;==========================================================
        .nolist
#ifdef	VTI
	#define TI83P
#endif
	#include	"keyval.inc"
        #include        "ion.inc"
        .list

#ifdef  TI83P
        .org    progstart-2
        .db     $BB,$6D
#else
        .org    progstart
#endif
        ret
        jr      nc,start_of_program
        .db     "Dodge example",0

start_of_program:

;==========================================================
; start of program
;==========================================================
	call gsClearbuffer
	call gsEnable
	call gsSetFreq

	;reset blocks
	ld hl,blockY
	ld (hl),8
	ld de,blockY+1
	ld bc,11
	ldir

;==========================================================
; loop
;==========================================================
loop:

	;=== clear buffers
	call gsClearBuffer

	;=== draw blocks
	ld b,12
	ld hl,blockY
drawblocks:
	ld a,(hl)
	push bc
	push hl
	cp 8 \ jr z,dontdrawblock
	add a,a
	add a,a
	add a,a
	ld l,a
	ld a,12
	sub b
	ld ix,blocksprite
	call gsAlignedSprite

dontdrawblock:
	pop hl
	inc hl
	pop bc
	djnz drawblocks

	;=== draw ship
	ld a,(shipX)
	ld l,56
	ld ix,shipsprite
	call gsAlignedSprite

	;=== copy buffer
	call gsCopyBuffer


	;=== update block coords
	ld b,12
	ld hl,blockY+11
updloop:
	push bc
	ld a,(hl)
	cp 8 \ jp nz,nonewplace

	;=== get new position
	push bc
	push hl
	ld b,20
	call ionRandom
	pop hl
	pop bc
	or a \ jr nz,updloop_nonew
	ld (hl),0
	jp updloop_nonew

	;=== check hitcollision
nonewplace:
	cp 7 \ jr nz,itsnot7
	ld a,(shipX)
	inc a
	cp b \ jp z,dead
	ld a,(hl)
itsnot7:

	inc a
	ld (hl),a
updloop_nonew:
	dec hl
	pop bc
	djnz updloop

	;=== check for keys
	call gsGetk
	cp gClear \ jr z,quit
	cp gLeft \ jr z,goLeft
	cp gRight \ jr z,goRight
	jp loop

goLeft:
	ld a,(shipX)
	or a \ jp z,loop
	dec a
	ld (shipX),a
	jp loop
goRight:
	ld a,(shipX)
	cp 11 \ jp z,loop
	inc a
	ld (shipX),a
	jp loop

dead:
	pop hl
;==========================================================
; quit
;==========================================================
quit:
	call gsDisable
	ret

;==========================================================
; grayscale include file
;==========================================================
; comment these defines in or out to activate/deactivate them

;#DEFINE NODOUBLEBUFFER	;when on,routines write directly to screen (faster and smaller)
;#DEFINE 3LEVELGRAY	;makes it 3-level grayscale (a bit faster)
;#DEFINE XORSPRITE	;includes gsPutSprite
;#DEFINE LARGESPRITE	;includes gsLargeSprite
#DEFINE ALIGNEDSPRITE	;includes gsAlignedsprite
;#DEFINE ALIGNEDMASKEDSPRITE

#include graylib.inc

;==========================================================
; sprites
;==========================================================
shipsprite:
 .db $99,$BD,$E7,$C3,$C3,$E7,$7E,$3C,$99,$A5,$DB,$A5,$A5,$DB,$66,$3C
blocksprite:
 .db $7E,$81,$81,$81,$81,$81,$81,$7E,$7E,$FF,$F7,$FB,$FF,$FF,$FF,$7E

;==========================================================
; data
;==========================================================

blockY:
	.db 0,0,0,0,0,0,0,0,0,0,0,0

shipX:
	.db 0
shipY:
	.db 0

.end
END
