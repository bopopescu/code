\input texinfo
@c %**start of header
@setfilename zasm.info
@settitle zasm manual
@syncodeindex pg cp
@c %**end of header

@copying
This is the manual for zasm, version 0.0 alpha

Copyright @copyright{} 2004 Steven Deprez
@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@titlepage
@title zasm 0.0 alpha manual
@author Steven Deprez
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top zasm 0.0 alpha manual

Zasm is an assembler that is mainly aimed at TI graphing calculators, using a z80 processor

@insertcopying
@end ifnottex

@menu
* command line options::    how to use zasm itself
* preprocessor::            details on the preprocessor
* assembler::               details on the assembler
* converter::               details on the converter
* copying the program::     Your right and freedoms
* copying this manual::     What you can do with this manual
* index::                   index of this manual
@end menu

@node command line options
@chapter command line options
@cindex command line options for zasm

Zasm is an cross assembler for the z80 processor. Its main purpose is to be useful for z80 based
graphing calculators form TI. Therefore it tries to be compatible with the two most used assemblers
in this field: 'Zilog Developer Studio' and 'TASM'. It successfully parses TI's original include file for the TI83+,
and the one adapted to TASM.

The command line looks like
@code{zasm [options] -o outfile infile}

where options can be one or more options of the following list

@table @option
@item -D macro[(arg,...)][=def]
@itemx --define macro[(arg,...)][=def]
@itemx --macro macro[(arg,...)][=def]
@itemx --equ macro[(arg,...)][=def]
Define the macro @samp{macro}, optionally with arguments @samp{(arg, ...)} as @samp{def} if given, an empty string else.

@item -U macro
@itemx --undef macro
Undo the effect of the previous option.

@item -I path
@itemx --add-include-path path
Add @samp{path} to the include path that is used to search for include files.

@item -i file
@itemx --include file
Search @samp{file} in the include path and parse it macros and definition for later use.

@item -c
@itemx --calc
Set the calculator type for the output file. Default is TI83+

@item -t
@itemx --type
Set the variable type of the output file. Default is ASM

@item -b
@itemx --begin-chars
Only for the TI83+ for now: add the token that signifies an ASM program to the beginning of the content of the output file.

@item -b
@itemx --begin-chars
Only for the TI83+ for now: do not add the token that signifies an ASM program
to the beginning of the content of the output file.

@item --debug
@itemx --warning
@itemx --error
Allow debugging output, resp. warnings, resp. error messages to be written to the standard error.

@item --nodebug
@itemx --nowarning
@itemx --noerror
Disallow debugging output, resp. warnings, resp. error messages to be written anywhere.

@item --debug-file file
@itemx --warning-file file
@itemx --error-file file
Output all debugging output, warnings, resp. error messages to file @samp{file}. If file is @samp{-}, it does the same as
@option{--debug}, @option{--warning}, resp. @option{--error}.

@item -p
@itemx -a
@itemx -c
Run the preprocessor, assembler, resp. converter. Default is to run all this three.

@item -np
@itemx -na
@itemx -nc
Do not run the preprocesor, assembler, resp. converter. Be careful with these options.

@end table

@node preprocessor
@chapter preprocessor
@cindex preprocessor details

The preprocessor is actually the largest part of zasm. It transforms a structured, human readable assembler file in a
very strict assembler format. It should accept every preprocessor or assembler directive ZDS or TASM accepts. If you
feel that such a directive is missing or behaves strange, please mail me at @email{stevendeprez@@users.sourceforge.net}.

The output format is not valid for ZASM or TASM, so you cannot use zasm's preprocessor @command{zasm-pp} as an extra one
for these assemblers.

Someting that could give strange results, is that equates are considered as macro definitions, and are thus litterally
substituted. Therefor it could be useful to add parentheses around the value.

@menu
* preprocessor directives::             what directives are accepted?
* constructs for preprocessor::         what other special constructs are accepted?
* preprocessor command line::            how to use zasm-pp as standalone
@end menu

@node preprocessor directives
@section preprocessor directives
@cindex preprocessor directives

Directives can start with a @samp{#}, @samp{.} or spaces or tabs

@table @code
@item if condition
Interprete the following lines, until a closing directive, only if @samp{condition} is true.

@item ifdef macro
Interprete the following lines, until a closing directive, only if @samp{macro} is defined.

@item ifndef macro
Interprete the following lines, until a closing directive, only if @samp{macro} is not defined.

@item else
Interprete the following lines, until @code{#endif}, only if the last @code{#if}, @code{#ifdef} or @code{#ifndef}
,at the same level, started to ignore lines.

@item endif
Closes a conditional construct.

@item elseif condition
@itemx elsif condition
@itemx elseifdef macro
@itemx elsifdef macro
@itemx elseifndef macro
@itemx elsifndef macro
Does the same as @code{#else}, followed by @code{#if}, @code{#ifdef} or @code{#ifndef}.
Except that no extra closing @code{#endif} is needed.

@item define macro(arg,...) def
@itemx declare macro(arg,...) def
@itemx macro macro(arg,...) def
@itemx equ macro(arg,...) def
@itemx const macro(arg,...) def
Define @samp{macro}, taking arguments @samp{arg,...} as def. One can define a macro without arguments by omitting the
parentheses, or writing @samp{()}. If def is omitted, it is considered as an empty string, so all occurences of @samp{macro}
are removed. Argument names are substituted in @samp{def} by the actual arguments in the occurence. If one writes @samp{&arg},
where @samp{arg} is an argument name, this complete construct is substituted. This allows definitions like
@samp{#define B_CALL(label) rst rbcall\ .dw _&label}. Another feature is illustrated here: @samp{\} is substituted by
a newline.

@item undef macro
Undefine a macro.

@item include ``file''
@itemx input  ``file''
Search @samp{file} in the directory of the source file and parse it instead of this line.

@item include <file>
@itemx input <file>
Search @samp{file} in the include path and parse it instead of this line.

@item db
@itemx dw
Dump byte resp. word: include the args in the final file as litteral bytes or words.

@item newpage
Start a new page in a multipage application.

@item end
Ignored, for compatibility reasons.

@end table

@node constructs for preprocessor
@section constructs for preprocessor
@cindex constructs for preprocessor

The following constructs are interpreted:

@table @code
@item label macro arg,...
@itemx label .macro arg,...
@itemx label #macro arg,...
Define @samp{label} as a macro with arguments @samp{arg,...} and definition the following text until @code{.endm}.

@item endm
@itemx .endm
@itemx #endm
End the last macro definition.

@item label equ def
@itemx label .equ def
@itemx label #equ def
@itemx label = def
Define @samp{label} as a macro without arguments, and definition @samp{def}.

@item db
@itemx .db
@itemx #db
@itemx dw
@itemx .dw
@itemx #dw
The same as the @code{#db} or @code{#dw} directive, but allows a label to be defined in the first collumn

@end table

@node preprocessor command line
@section preprocessor command line
@cindex preprocessor command line

Because the output format of the preprocessor is not suitable for most other preprocessors, it is not recommended
to run this preprocessor directly.

The arguments are interpreted in the order they are given. You should be careful that @option{-o outfile} appears before
any output is produced. 

The command line looks like
@code{zasm-pp [options] -o outfile infile}

where options can be one or more options of the following list

@table @option
@item -D macro[(arg,...)][=def]
@itemx --define macro[(arg,...)][=def]
@itemx --macro macro[(arg,...)][=def]
@itemx --equ macro[(arg,...)][=def]
Define the macro @samp{macro}, optionally with arguments @samp{(arg, ...)} as @samp{def} if given, an empty string else.

@item -U macro
@itemx --undef macro
Undo the effect of the previous option.

@item -I path
@itemx --add-include-path path
Add @samp{path} to the include path that is used to search for include files.

@item -i file
@itemx --include file
Search @samp{file} in the include path and parse it macros and definition for later use.

@item --debug
@itemx --warning
@itemx --error
Allow debugging output, resp. warnings, resp. error messages to be written to the standard error.

@item --nodebug
@itemx --nowarning
@itemx --noerror
Disallow debugging output, resp. warnings, resp. error messages to be written anywhere.

@item --debug-file file
@itemx --warning-file file
@itemx --error-file file
Output all debugging output, warnings, resp. error messages to file @samp{file}. If file is @samp{-}, it does the same as
@option{--debug}, @option{--warning}, resp. @option{--error}.

@end table

@node assembler
@chapter assembler
@cindex assembler details

The assembler converts the output of the preprocessor in intel hex format.

The file format is very strict. All directives should follow a @samp{.} or @samp{#} directly, without any white spaces.
Arguments have to follow exactely one space, and are separated by @samp{,}'s, again without white spaces. Opcodes must
come after exactly one space, their arguments should be formatted like these of directives. @code{db} and @code{dw} are
considered as opcodes that take one argument. Labels should be the only thing on their line. All calculations should
be written in prefix notation, as the following example: @samp{*3:+label:5} means @samp{3*(label+5)}. Numbers must be in
decimal.

For compatibility reasons, some altenate forms of some opcodes are supported. For example ZDS's @samp{ex hl,de} is made
equivalent to TASM's @samp{ex de,hl}.

@command{zasm-asm} accepts exactly two arguments: the input filename and the output filename, in this order.
For example @samp{zasm-asm example.pp example.hex}.

This assembler accepts the following assembler directives.

@table @code
@item #org address
Assume the next byte starts at address @samp{address}.

@item #page number
Start page number @samp{number}. This does not set the current address to 4000h, an explicit #org is needed.
@end table

@node converter
@chapter converter
@cindex converter details

The converter converts an intel hex file, as output by the assembler, into a file that can be loaded directly onto a
calculator. At this moment only the TI83+ is really supported, because it is the only one I know well enough. All other
calculators are supported via libtifiles, form tilp. The formats for these calculators are raw binary, prepended by the
length of the program, and wrapped in a graph-link compatible file.

For the TI83+, the following types are supported: @samp{prgm}, @samp{asm}, @samp{app} and @samp{8xk}.
@samp{prgm} is an assembled program, where the data is saved in hexadecimal format. This file can be edited on calc,
but that is dangerous. @samp{asm} is an assembled program that is saved in binary form. This takes less place on a calculator,
but is not editable. @samp{app} is a signed application in intel hex format, without graph-link header. @samp{8xk} is
the same as @samp{app}, but with graph-link header. The first two formats are made using libtifiles, the next two with 
libappsign, a library version of appsign, by Peter-Martijn Kuipers.

A command line for this converter looks like @samp{zasm-conv -c calc -t type [-b] infile outfile}.
Here @samp{calc} can be a z80 based TI graphing calculator, @samp{type} a variable type that can contain a program.
@samp{-b} means that, for the TI83+, a token 'AsmPrgm' is prepended to the hex program, or 'AsmCmp' to the binary program.

@node copying the program
@chapter copying zasm
@pindex copying zasm

Copyright @copyright{} 2004 Steven Deprez

zasm is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the free software foundation; either version 2 of the license, or
(at your option) any later version.

zasm is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with zasm; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

In addition, as a special exception, Peter-Martijn Kuipers gives permission
to link the code of this program with the appsign library, and distribute
linked combinations including the two. If you modify this file, you may extend
this exception to your version of the file, but you are not obligated to do so.
If you do not wish to do so, delete this exception statement form your version.

@menu
* The GNU General Public License::
* appsign conditions::
@end menu

@node The GNU General Public License
@section The GNU General Public License

@include gpl.texi

@node appsign conditions
@section appsign conditions

Copyright (C) Peter-Martijn Kuipers

Disclaimer:
This library comes without any warranties, not even the implied warranty of
merchantability or fitness for a particular purpose, to the maximum extent
permitted by applicable law.
You will hold neither the Porter/Author, not Texas Instruments responsible
for any and all damages caused by the use of this library.

Copying and reverse engineering:
You may copy the library to any unlimited number of machines or people,
prived that all license and copyright noticed remain intact.
You may not reverse-engineer, disassemble, reassemble, or decomplile the
program.

--Peter-Martijn

@node copying this manual
@appendix copying this manual

@include fdl.texi

@node index
@unnumbered index

@printindex cp

@bye
