
http://cs.baylor.edu/~donahoo/practical/CSockets2/textcode.html

http://cs.baylor.edu/~donahoo/practical/CSockets/textcode.html


Generally, compilation is as follows:
Linux: gcc -o TCPEchoClient -std=gnu99 TCPEchoClient.c DieWithMessage.c TCPClientUtility.c
Solaris: gcc -o TCPEchoClient TCPEchoClient.c DieWithMessage.c TCPClientUtility.c -lsocket -lnsl
Both: Add -lpthread to both Linux and Solaris for the threads example

https://vichargrave.github.io/articles/2013-02/tcp-ip-network-programming-design-patterns-in-cpp


What we are implementing here are RESTful services:
-- standard HTTP methods

    GET     :   list collection or get item
    PUT     :   replace or create collection or member of collection
    POST    :   used on collections to add new entry
    DELETE  :   delete member or entire collection


Summary table of HTTP Methods
Method      RFC         Rqst Body   Resp Body   Safe    Idempotent  Cacheable
======      ===         =========   =========   ====    ==========  =========
GET         RFC 7231    No          Yes         Yes     Yes         Yes
HEAD        RFC 7231    No          No          Yes     Yes         Yes
POST        RFC 7231    Yes         Yes         No      No          Yes
PUT         RFC 7231    Yes         Yes         No      Yes         No
DELETE	    RFC 7231    No          Yes         No      Yes         No
CONNECT	    RFC 7231    Yes         Yes         No      No          No
OPTIONS	    RFC 7231    Optional    Yes         Yes     Yes         No
TRACE	    RFC 7231    No          Yes         Yes     Yes         No
PATCH	    RFC 5789    Yes         Yes         No      No          Yes
    

std::string rq("GET /newGame?name=david HTTP/1.1\r\n\r\n");
char* s = "GET /video/nice.mp4 HTTP/1.1\r\nHost: example.com\r\n\r\n"; 


http://stackoverflow.com/questions/22077802/simple-c-example-of-doing-an-http-post-and-consuming-the-response
http://www.restapitutorial.com/lessons/restquicktips.html
http://www.restapitutorial.com/resources.html

file:///C:/Users/bartb/Downloads/RESTful%20Best%20Practices-v1_2.pdf

GET: The query string is optional but, if specified, must be reasonably short. 
    Because of this the header could just be the GET command and nothing else. A sample message could be:
        GET /path?query_string HTTP/1.0\r\n
        \r\n

POST: What would normally be in the query string is in the body of the message 
    instead. Because of this the header needs to include the Content-Type: and 
    Content-Length: attributes as well as the POST command. A sample message could be:
        POST /path HTTP/1.0\r\n
        Content-Type: text/plain\r\n
        Content-Length: 12\r\n
        \r\n
        query_string

Lines in the header and the blank line at the end of the header must end with a carraige 
return and linefeed pair (see HTTP header line break style) so that's why those lines 
have \r\n at the end.

A URL has the form of http://host:port/path?query_string


