
Algorithms
==========
Sort:
    [c:p] selection sort
    [c:p] bubble sort
    [c:p] anagram
    [c:p] palindrome
    [c:p] merge sort (recursive)
    [c:p] quicksort (recursive partitions, left/right scans and swaps)
    [c:p] insertion sort
    [c:x] heapsort (max) --> python broken
Search:
    [c:p] sequential search
    [c:p] string match
    [c:p] binary search
    [   ] backtracking - nqueens
String: 
    [c: ] boyer
    [c: ] split
Dynamic Programming:
    [c: ] warshall - transitive closure, connected, unweighted
    [c: ] floyd - all pairs shortest paths, weighted
Graph:
    [c: ] dfs - visit adjacents until deadend, next v off stack
    [c:p] bfs - visit adjacents til deadend, next v off quue
    [ : ] topsort
    [ : ] netflow
Recursion:
    [ : ] .
Greedy:
    [c: ] prim - mst, weighted, connected
    [c: ] kruskal - mst, weighted, conneced
    [c:x] dijkstra -- shortest path, non-neg weights
    [ : ] knapsack
    [ : ] set cover
    [ : ] traveling saleslady
    [ : ] LCS
    [ : ] substring match
    [ : ] maximum monotone subsequence
    [ : ] k-nearest
List: 
    [c: ] reverse
    [c: ] merge
    [c: ] zip: arrays, lists, recursive/nonrecursive
    [c: ] cycle detect (?remove)
Tree: 
    [c: ] avl
    [c: ] travs: pre, post, in, bfs, dfs
    [c: ] trie
Geometry/Grid:
    [ : ] grid traversals
Parallel:
    [c: ] thread
    [c: ] mutex
    [c: ] condition variable

GOOGLE: skeina C site:sharjah.ac.ae

http://www.sharjah.ac.ae/en/Media/Conferences/ME-GPC/Documents/Chapter%2012%20-%20Grids.pdf

