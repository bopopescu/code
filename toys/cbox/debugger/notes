
https://lldb.llvm.org/lldb-gdb.html
https://github.com/DerekSelander/LLDB <-- python LLDB scripts


gcc -g test.c
lldb a.out
> list
> b 10 <-- sets breakpoint at line 10
> run  <-- runs to next breakpoint
> n    <-- single step over -- also works in asm
> si   <-- step in
> print var  <-- print variable name 'var'
> thread backtrace


$ valgrind --leak-check=yes ./a.out
==3497== Memcheck, a memory error detector
==3497== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3497== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==3497== Command: ./a.out
==3497== 
test: 45
==3497== 
==3497== HEAP SUMMARY:
==3497==     in use at exit: 26,522 bytes in 189 blocks
==3497==   total heap usage: 274 allocs, 85 frees, 32,778 bytes allocated
==3497== 
==3497== 16 bytes in 1 blocks are definitely lost in loss record 5 of 65
==3497==    at 0x100009681: malloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==3497==    by 0x100000F64: main (test.c:13)
==3497== 
==3497== LEAK SUMMARY:
==3497==    definitely lost: 16 bytes in 1 blocks
==3497==    indirectly lost: 0 bytes in 0 blocks
==3497==      possibly lost: 0 bytes in 0 blocks
==3497==    still reachable: 0 bytes in 0 blocks
==3497==         suppressed: 26,506 bytes in 188 blocks
==3497== 
==3497== For counts of detected and suppressed errors, rerun with: -v
==3497== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 16 from 16)
$ 

