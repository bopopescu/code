!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        INSTALLATION NOTES

==> make install
==> make install-xcode-toolchain
==> Caveats
To use the bundled libc++ please add the following LDFLAGS:
  LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"

llvm is keg-only, which means it was not symlinked into /usr/local,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have llvm first in your PATH run:
  echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.bash_profile

For compilers to find llvm you may need to set:
  export LDFLAGS="-L/usr/local/opt/llvm/lib"
  export CPPFLAGS="-I/usr/local/opt/llvm/include"

==> Summary
🍺  /usr/local/Cellar/llvm/7.0.1: 5,387 files, 2.9GB, built in 161 minutes 19 seconds
$ 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

http://clang.llvm.org/docs/IntroductionToTheClangAST.html

# list of clang options
https://bcain-llvm.readthedocs.io/projects/clang/en/latest/ClangCommandLineReference/


$cmd = "clang -I$path_to_headers -Xclang -ast-dump -fsyntax-only main.c > main.ast";
system($cmd);

https://jonasdevlieghere.com/understanding-the-clang-ast/

TranslationUnitDecl
|-TypedefDecl
|-RecordDecl -> struct definition or union definition
|--FieldDecl
|-EnumDecl
|--EnumConstantDecl
|-FunctionDecl
|--ParmVarDecl
|-VarDecl
|

LLVM IR
$ llvm-gcc main2.cpp -S -emit-llvm
$ -> produces main2.ll
See LLVM pdf for explanation

https://embeddedartistry.com/blog/2017/2/20/installing-clangllvm-on-osx
https://www.lewuathe.com/build-llvm-module-on-macos.html

https://www.cs.cornell.edu/~asampson/blog/llvm.html
https://www.ibm.com/developerworks/library/os-createcompilerllvm1/index.html

https://llvm.org/docs/tutorial/OCamlLangImpl1.html

class ASTNode {
/// from http://stackoverflow.com/a/28530559/841108
///... add some things here, e.g. a virtual print method
};

class NumberNode : public ASTNode {
   long number;
   /// etc...
};

class BinaryOpNode : public ASTNode {
   std::unique_ptr<ASTNode> left;
   std::unique_ptr<ASTNode> right;
 /// etc....
};

class AdditionNode : public BinaryOpNode {
/// etc....
};

class CallNode : public ASTNode {
   std::shared_ptr<Function> func;
   std::vector<std::unique_ptr<ASTNode>> args;
};


