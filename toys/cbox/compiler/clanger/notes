!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        INSTALLATION NOTES

Tutorial:
========
https://llvm.org/docs/tutorial/OCamlLangImpl1.html


Call Graph Gen:
==============
https://stackoverflow.com/questions/9939794/how-to-use-llvm-to-generate-a-call-graph
https://github.com/lihebi/LLVMCallGraph


==> make install
==> make install-xcode-toolchain
==> Caveats
To use the bundled libc++ please add the following LDFLAGS:
  LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"

llvm is keg-only, which means it was not symlinked into /usr/local,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.

If you need to have llvm first in your PATH run:
  echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.bash_profile

For compilers to find llvm you may need to set:
  export LDFLAGS="-L/usr/local/opt/llvm/lib"
  export CPPFLAGS="-I/usr/local/opt/llvm/include"

==> Summary
🍺  /usr/local/Cellar/llvm/7.0.1: 5,387 files, 2.9GB, built in 161 minutes 19 seconds
$ 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Good website:
https://eli.thegreenplace.net/


http://clang.llvm.org/docs/IntroductionToTheClangAST.html

# list of clang options
https://bcain-llvm.readthedocs.io/projects/clang/en/latest/ClangCommandLineReference/


$cmd = "clang -I$path_to_headers -Xclang -ast-dump -fsyntax-only main.c > main.ast";
system($cmd);

https://jonasdevlieghere.com/understanding-the-clang-ast/

TranslationUnitDecl
|-TypedefDecl
|-RecordDecl -> struct definition or union definition
|--FieldDecl
|-EnumDecl
|--EnumConstantDecl
|-FunctionDecl
|--ParmVarDecl
|-VarDecl
|

LLVM IR
$ llvm-gcc main2.cpp -S -emit-llvm
$ -> produces main2.ll
See LLVM pdf for explanation

https://embeddedartistry.com/blog/2017/2/20/installing-clangllvm-on-osx
https://www.lewuathe.com/build-llvm-module-on-macos.html

https://www.cs.cornell.edu/~asampson/blog/llvm.html
https://www.ibm.com/developerworks/library/os-createcompilerllvm1/index.html

https://llvm.org/docs/tutorial/OCamlLangImpl1.html

class ASTNode {
/// from http://stackoverflow.com/a/28530559/841108
///... add some things here, e.g. a virtual print method
};

class NumberNode : public ASTNode {
   long number;
   /// etc...
};

class BinaryOpNode : public ASTNode {
   std::unique_ptr<ASTNode> left;
   std::unique_ptr<ASTNode> right;
 /// etc....
};

class AdditionNode : public BinaryOpNode {
/// etc....
};

class CallNode : public ASTNode {
   std::shared_ptr<Function> func;
   std::vector<std::unique_ptr<ASTNode>> args;
};


Clang to dump record layouts:
============================
clang -c add.c -Xclang -fdump-record-layouts >out
llvm-gcc -c add.c -Xclang -fdump-record-layouts >out

typedef struct {
    float x, y, z;
} vector3;

typedef struct mcp_coeff
{
    vector3 eulers;
    int x;
    float y;
    char z;
} mcp_coeff;


typedef struct coeffs {
    mcp_coeff mc;
    int id;
} coeffs;


int main()
{
    coeffs dude = {0};
}

===>

*** Dumping AST Record Layout
         0 | vector3
         0 |   float x
         4 |   float y
         8 |   float z
           | [sizeof=12, align=4]

*** Dumping AST Record Layout
         0 | struct mcp_coeff
         0 |   vector3 eulers
         0 |     float x
         4 |     float y
         8 |     float z
        12 |   int x
        16 |   float y
        20 |   char z
           | [sizeof=24, align=4]

*** Dumping AST Record Layout
         0 | struct coeffs
         0 |   struct mcp_coeff mc
         0 |     vector3 eulers
         0 |       float x
         4 |       float y
         8 |       float z
        12 |     int x
        16 |     float y
        20 |     char z
        24 |   int id
           | [sizeof=28, align=4]


//////////////////////
https://pauladamsmith.com/blog/2015/01/how-to-get-started-with-llvm-c-api.html

vi sum.c
$ llvm-gcc `/usr/local/opt/llvm/bin/llvm-config --cflags` -c sum.c
warning: unknown warning option '-Werror=unguarded-availability-new'; did you mean '-Werror=partial-availability'?
      [-Wunknown-warning-option]
sum.c:7:5: warning: implicitly declaring library function 'printf' with type 'int (const char *, ...)'
      [-Wimplicit-function-declaration]
    printf("%d\n", sum(42, 99));
    ^
sum.c:7:5: note: include the header <stdio.h> or explicitly provide a declaration for 'printf'
2 warnings generated.
$ llvm-gcc `/usr/local/opt/llvm/bin/llvm-config --cflags` -c sum.c
warning: unknown warning option '-Werror=unguarded-availability-new'; did you mean '-Werror=partial-availability'?
      [-Wunknown-warning-option]
1 warning generated.
$ llvm-g++ `/usr/local/opt/llvm/bin/llvm-config --cxxflags --ldflags core executionengine jit inter preter analysis native bitwriter --system-libs` sum.o -o  sum
llvm-config: unknown component name: jit
$ ./sum
141
           
