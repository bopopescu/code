#include <iostream>
#include <algorithm>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <memory>
#include <string>
#include <vector>

static std::string locator;
std::vector<std::string> file;
static bool in_struct = false;
static bool get_type = false;

//===----------------------------------------------------------------------===//
// Lexer
//===----------------------------------------------------------------------===//

// The lexer returns tokens [0-255] if it is an unknown character, otherwise one
// of these for known things.
enum Token {
  tok_eof = -1,

  tok_pipe = -2,

  // commands
  tok_def = -3,

  // primary
  tok_type = -4,
  tok_identifier = -5,
  tok_offset = -6,
  tok_attributes = -7,

  tok_comment = -8
};

static std::string StructStr;     // Filled in if tok_identifier
static std::string TypeStr;       // Filled in if tok_identifier
static std::string IdentifierStr; // Filled in if tok_identifier
static std::string CommentStr;    // Filled in if tok_identifier
static std::string AttribsStr;    // Filled in if tok_identifier
static int OffsetVal;             // Filled in if tok_offset

/// gettok - Return the next token from standard input.
static int gettok()
{
    static int LastChar = ' ';

    // Skip any whitespace.
    while (isspace(LastChar)) {
        LastChar = getchar();
    }

    //printf("last: %c\n", LastChar);
    if (isdigit(LastChar)) { // Number: [0-9]+
        std::string NumStr;
        do {
            NumStr += LastChar;
            LastChar = getchar();
        } while (isdigit(LastChar));
        OffsetVal = strtoul(NumStr.c_str(), nullptr, 0);    
        return tok_offset;
    }
  
    if (isalpha(LastChar) || (LastChar == '_')) { // identifier: [a-zA-Z][a-zA-Z0-9_]*
        IdentifierStr = LastChar;
        while (isalnum((LastChar = getchar())) || (LastChar == '_')) {
            IdentifierStr += LastChar;
        }
        while (isspace(LastChar)) {
            LastChar = getchar();
        }
        //if (isalpha(LastChar) || (LastChar == '_')) { // identifier: [a-zA-Z][a-zA-Z0-9_]*
        //    IdentifierStr = LastChar;
        //}
        //if (get_type) {
        //    TypeStr = IdentifierStr;
        //    IdentifierStr.clear();
        //    get_type = false;
        //    return tok_type;
        //} else {
            return tok_identifier;
        //}
    }

    if (LastChar == '|') {
        LastChar = getchar();
        return tok_pipe;
    }

    if (LastChar == '[') {
        AttribsStr.clear();
        AttribsStr += LastChar;
        // Comment until end of line.
        do {
            LastChar = getchar();
            AttribsStr += LastChar;
        } while (LastChar != EOF && LastChar != '\n' && LastChar != '\r');
        if (LastChar != EOF) {
            return tok_attributes; //gettok();
        }
    }

    if (LastChar == '*') {
        CommentStr += LastChar;
        // Comment until end of line.
        do {
            LastChar = getchar();
            CommentStr += LastChar;
        } while (LastChar != EOF && LastChar != '\n' && LastChar != '\r');

        if (LastChar != EOF) {
            return tok_comment; //gettok();
        }
    }

    // Check for end of file.  Don't eat the EOF.
    if (LastChar == EOF) {
        return tok_eof;
    }

    // Otherwise, just return the character as its ascii value.
    int ThisChar = LastChar;
    LastChar = getchar();

    return ThisChar;
}

//===----------------------------------------------------------------------===//
// Parser
//===----------------------------------------------------------------------===//

/// CurTok/getNextToken - Provide a simple token buffer.  CurTok is the current
/// token the parser is looking at.  getNextToken reads another token from the
/// lexer and updates CurTok with its results.
static int CurTok;
static int getNextToken() { return CurTok = gettok(); }


/// top ::= definition | external | expression | ';'
static void MainLoop()
{
    while (true) {
        switch (CurTok) {
        case tok_eof:
            //printf("got eof\n");
            return;
        case tok_pipe:
            //printf("%d | ", OffsetVal);
            get_type = true;
            //HandleExtern();
            break;
        case tok_offset:
            //printf("got offset: %d\n", OffsetVal);
            //HandleExtern();
            break;
        case tok_type:
            //HandleExtern();
            //printf("type: %s\n", TypeStr.c_str());
            break;
        case tok_identifier:
            if (in_struct == false) {
                in_struct = true;
                StructStr = IdentifierStr;
                printf("%s:\n", StructStr.c_str());
            } else {
                printf(" %d : %s\n", OffsetVal, IdentifierStr.c_str());
            }
            //HandleExtern();
            break;
        case tok_attributes:
            printf("got attribs: %s\n", AttribsStr.c_str());
            in_struct = false;
            //HandleExtern();
            break;
        case tok_comment:
            //printf("got comment\n");
            //HandleExtern();
            break;
        default:
            break;
        }
        getNextToken();
    }
}

int main()
{

    getNextToken();
    MainLoop();

    return 0;
}


