#include <stdio.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>

#define WIDTH  640
#define HEIGHT 480

uint16_t CreateHicolorPixel(SDL_PixelFormat * fmt, Uint8 red, 
        uint8_t green, uint8_t blue);

int main()
{
    SDL_Surface *screen = NULL;
    SDL_Window *window = NULL;
    SDL_Surface *image;
    SDL_Rect src, dest;
    //SDL_Surface *surface = NULL;

    if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {
        printf("error init SDL\n");
        return 1;
    }
    
    atexit(SDL_Quit);

    window = SDL_CreateWindow("intro", SDL_WINDOWPOS_CENTERED, 
            SDL_WINDOWPOS_CENTERED, WIDTH, HEIGHT, 0);
    if (window == NULL) {
        printf("unable to create window %s\n", SDL_GetError());
        return 1;
    }

    //if (SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN_DESKTOP)) {
    //    printf("unable to set fullscreen %s\n", SDL_GetError());
    //    return 1;
    //}

    SDL_Renderer *rend = SDL_CreateRenderer(window, -1, 
            /*SDL_RENDERER_ACCELERATED |*/ SDL_RENDERER_SOFTWARE);
    if (rend == NULL) {
        printf("unable to create renderer %s\n", SDL_GetError());
        return 1;
    }
    
    image = IMG_Load("./wipeout.jpg");
    if (image == NULL) {
        printf("Unable to load bitmap.\n");
        return 1;
    }

    SDL_Texture *tex = SDL_CreateTextureFromSurface(rend, image);
    if (tex == NULL) {
        printf("unable to create texture %s\n", SDL_GetError());
        return 1;
    }

    SDL_QueryTexture(tex, NULL, NULL, &dest.w, &dest.h);

    // adjust height and width of our image box. 
    dest.w /= 6; 
    dest.h /= 6; 

    printf("w: %d, h: %d\n", dest.w, dest.h);

    dest.w = (WIDTH - dest.w)/2;
    dest.h = (HEIGHT - dest.h)/2;

    screen = SDL_GetWindowSurface(window);
    if (screen == NULL) {
        printf("unable to get surface %s\n", SDL_GetError());
        return 1;
    }

#if 0
    uint16_t *raw_pixels;
    int x, y;

    SDL_LockSurface(screen);
    /* Get a pointer to the video surface's memory. */
    raw_pixels = (Uint16 *) screen->pixels;
    /* We can now safely write to the video surface. We'll draw a
    nice gradient pattern by varying our red and blue components
    along the X and Y axes. Notice the formula used to calculate
    the offset into the framebuffer for each pixel.
    (The pitch is the number of bytes per scanline in memory.) */
    for (x = 0; x < 256; x++) {
        for (y = 0; y < 256; y++) {
            uint16_t pixel_color;
            int offset;
            pixel_color = CreateHicolorPixel(screen->format, x, 0, y);
            offset = (screen->pitch / 2 * y + x);
            raw_pixels[offset] = pixel_color;
        }
    }
    SDL_UnlockSurface(screen);
#endif

   int close = 0;
    int speed = 300;

    while (!close) {
        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            switch (event.type) {
                case SDL_QUIT:
                    close = 1;
                    break;
                case SDL_KEYDOWN:
                    switch (event.key.keysym.scancode) {
                        case SDL_SCANCODE_W:
                        case SDL_SCANCODE_UP:
                            dest.y -= speed/30;
                            break;
                        case SDL_SCANCODE_A:
                        case SDL_SCANCODE_LEFT:
                            dest.x -= speed/30;
                            break;
                        case SDL_SCANCODE_S:
                        case SDL_SCANCODE_DOWN:
                            dest.y += speed/30;
                            break;
                        case SDL_SCANCODE_D:
                        case SDL_SCANCODE_RIGHT:
                            dest.x += speed/30;
                            break;
                        default:
                            break;
                    }
                default:
                    break;
            }
        }
        // right boundary
        if (dest.x + dest.w > WIDTH) {
            dest.x = WIDTH - dest.w;
        }
        // left boundary
        if (dest.x < 0) {
            dest.x = 0;
        }
        // bottom boundary
        if (dest.y + dest.h > HEIGHT) {
            dest.y = HEIGHT - dest.h;
        }
        // upper boundary
        if (dest.y < 0) {
            dest.y = 0;
        }

        // clear the screen
        SDL_RenderClear(rend);

        src.x = 0;
        src.y = 0;
        src.w = image->w; /* copy the entire image */
        src.h = image->h;
        dest.x = 0;
        dest.y = 0;
        dest.w = image->w;
        dest.h = image->h;
        /* Draw the bitmap to the screen. We are using a hicolor video
        mode, so we don't have to worry about colormap silliness.
        It is not necessary to lock surfaces before blitting; SDL
        will handle that. */
        SDL_BlitSurface(image, &src, screen, &dest);

#if 0
        // this flickers the screen
        if (SDL_UpdateWindowSurface(window)) {
         printf("unable to update surface %s\n", SDL_GetError());
            return 1;
        }
#endif
 
        //SDL_BlitSurface(image, &src, display, &dest);
//        SDL_RenderCopy(rend, tex, NULL, &dest);

        // triggers the double buffers
        // for multiple rendering
        SDL_RenderPresent(rend);

        /* Pause as the viewer gasps in awe. */
        SDL_Delay(1000/60);
    }

    // destroy texture
    SDL_DestroyTexture(tex);

    // destroy renderer
    SDL_DestroyRenderer(rend);
    
    SDL_FreeSurface(image);

    printf("Success!\n");
    
    return 0;
}

uint16_t CreateHicolorPixel(SDL_PixelFormat * fmt, uint8_t red, 
        uint8_t green, uint8_t blue)
{
    uint16_t value;

#if 0
    printf("red: %x, green: %x, blue: %x, \
            Rloss: %x, Gloss: %x, Bloss: %x, \
            Rshift: %x, Gshift: %x, Bshift: %x\n",
            red, green, blue, 
            fmt->Rloss, fmt->Gloss, fmt->Bloss,
            fmt->Rshift, fmt->Gshift, fmt->Bshift);
#endif

    /* This series of bit shifts uses the information from the
    SDL_Format structure to correctly compose a 16-bit pixel
    value from 8-bit red, green, and blue data. */
    value = ((red >> fmt->Rloss) << fmt->Rshift) +
        ((green >> fmt->Gloss) << fmt->Gshift) +
        ((blue >> fmt->Bloss) << fmt->Bshift);
    return value;
}
