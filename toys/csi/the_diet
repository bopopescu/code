1/9/2017 12:39:03 PM     C:\code\toys\cpp\epi.cc\the_diet

Master recursion:
[ ] http://stackoverflow.com/questions/22713811/mastering-recursive-programming
[ ] http://www.ibm.com/developerworks/library/l-recurs/
[ ] http://codinghighway.com/2013/09/14/mastering-recursion/

Recurrence relations:
[ ] https://www.cs.duke.edu/~reif/courses/alglectures/skiena.lectures/lecture3.pdf
[ ] http://www.cs.ucr.edu/~jiang/cs141/recur-tut.txt
[ ] http://nms.lu.lv/wp-content/uploads/2016/04/21-linear-recurrences.pdf
[ ] https://www.cs.cornell.edu/courses/cs3110/2014sp/recitations/24/using-the-substitution-and-master-method.html


Advanced Topics:
    Recursion: http://www.sparknotes.com/cs/recursion/whatisrecursion/=>Problems
    Dynamic Programming
    Greedy
    Backtracking
    Divide and Conquer
    Randomized
    Branch and Bound
    Geometry
    Graph


==================
Numbers (5):
[ ]     parity          : 5.1
[ ]     counting ones   :           :
[ ]     rotate          :           :

Array (6):
[x]     ring            :           :

String (7):
[x]     palindrome      : 7.5       : -> <- pointers len/2
[x]     anagram         :           : use ascii table
[ ]     regex/boyer     : 7.13      :

List (8,9):
[x]     reverse         : 8.2       : p.next=r,q=p.next,r=p,p=q
[x]     fifo            :           : diagram it
[ ]     cycle           : 8.3       :
[x]     merge           : 8.1       :
[ ]     zip             :           :
[x]     stack/max       : 9.1       : heap

Hash (13):
[x]     adt             :           : overload hash fun
[ ]     palind-perms    : 13.1      : 

Tree (10,15):
[ ]     avl             :           :
[ ]     set             :           :
[ ]     parse           :           :
[x]     dfs             :           : stack
[x]     bfs             :           : queue

Graph (19):
[x]     bfs             :           :
[ ]     dfs             :           :
[ ]     maze            : 19.1      :

Heap (11):
[x]     max             :           : add(siftup, chk par), del(siftdown, chk lft & rt)
                                    : par = x/2, left=(2x)+1, right = 2x
Search (12):
[ ]     binsearch       : 12.1      :

Sort (14):
[ ]     intersect       : 14.1      :

Concurrent (20):
[x]     procon          : 20.7      : cool!!

Patterns (23):

Recursion (16):
[ ]     hanoi           : 16.1      :

DP (17):
[ ]     knapsack        : 17.6      :

Greedy (18):
[ ]     3-sum           : 18.4      :

Network (24):
[ ]     http            : mine

Tech (24):
[ ]     xml
[ ]     json
[ ]     sqlite

Refs:
http://the-paper-trail.org/blog/advanced-computer-science-courses/
http://www.sparknotes.com/cs/ excellent site!!
www.algolist.net/Data_structures
https://linuxprograms.wordpress.com/

