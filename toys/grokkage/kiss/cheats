list reversal: 
    q =p->next
    p->next =r
    r = p
    p = q

heap:
up:                         down:
    k = size                    k = 1, top = [1]
    v = [size]                  while k <= size/2:
    while k/2 <= v:                 child = 2k
        [k] = [k/2]                 if child < size && 
        k = k/2                       [child] < [child+1]:
    [k[] = v                             child++
                                    if top >= [child] break
                                    [k] = [child]
                                [k] top

trie:
void insert(ROOT, KEY)              bool find(ROOT, KEY)
    T = ROOT                            T = ROOT
    foreach k in KEY:                   foreach k in KEY:
        if T->m[k-'a'] == NULL :            if T->m[k-'a'] == NULL return FALSE
            T->m[k-'a'] = NEW               T = T->m[k-'a']
        T = T->m[k-'a'] // next T       if T->m[TERM] == NULL return FALSE
    T->m[TERM] = NEW                    return TRUE

graph:
void bfs(GRAPH, START)
    HEAD=TAIL=0
    ring[TAIL++] = START
    while (tail != head):
        v = ring[HEAD++]
        VISIT(v)
        foreach i in GRAPH.n_vert:
            if GRAPH[v][i] == 1 && !VISITED[i]:
                ring[TAIL++]
                VISITED[i] = 1
                PARENT[i] = v

ring:
void put(x)                         int get()
    if (!full())                        x = [tail]
        [head] = x                      tail = (tail+1)%MAX
        head = (head+1)%MAX             size--
        size++;                         return x

int data() return size              int space() return MAX-data


SORT

AVL


